// <auto-generated />
using System;
using DataAccess.Concrete.EntityFramework.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220330134715_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Concrete.Aboutus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Paragraph1")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Paragraph2")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Paragraph3")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Paragraph4")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Paragraph5")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Aboutus");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Paragraph1 = "Kemer’in tarihi ve kültürel merkezlerinin kesişim noktasında yer alan, şehrin ilk 5 yıldızlı konaklama tesisi unvanına sahip Bilge Hotel, 35 yıllık deneyimi ile alanının en iyisi olmaya devam ediyor.",
                            Paragraph2 = "Bilge Hotel, Osmanlı sarayları ve Fransız mimarisinden esinlenilerek özenle tasarlanmış yeni konsepti kapsamında; birbirinden farklı şekilde dekore edilmiş lüks oda ve süitleri, Türk ve dünya mutfağının seçkin lezzetlerini servis eden restoranları, A’dan Z’ye yenilenmiş SPA tesisiyle misafirlerine en konforlu konaklama deneyimini sunuyor.",
                            Paragraph3 = "Bilge Hotel iş toplantıları, kutlamalar ve farklı özel etkinlikler için 1000 kişilik kapasiteye ve eksiksiz teknik donanıma sahip salonlarıyla bir şehir otelinin ötesine geçerek kişiye özel lüks hizmetler sunuyor.",
                            Paragraph4 = "Kemer şehir merkezinde yer alan Bilge Otel, alışveriş merkezlerine, Atatürk Kongre ve Kültür Merkezi’ne ve toplu taşıma duraklarına yürüyüş mesafesindedir.",
                            Paragraph5 = "Bilge Hotel Güvenli Turizm Sertifikası, ISO 22000 Gıda Güvenliği Yönetim Sistemi Belgesi, Sıfır Atık Belgesi ve Turuncu Bayrak sahibidir.",
                            PictureUrl = "/img/aboutus-img.jpg",
                            Status = 0,
                            Title = "Bilge Hotel, Kalite ve Konforun Adresi"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("ActivationKey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Entities.Concrete.Contact", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Facebook")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Fax")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Instagram")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone1")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Phone2")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Twitter")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ID");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Adress = "701 Pacocha Shoal, Gerhardport, Saint Lucia",
                            Email = "Toni.Hayes69@yahoo.com",
                            Facebook = "https://www.facebook.com/bilgehotel",
                            Fax = "05454526235",
                            Instagram = "https://www.instagram.com/bilgehotel",
                            Phone1 = "05454526235",
                            Status = 0,
                            Twitter = "https://www.twitter.com/bilgehotel"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Department", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ID");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DepartmentName = "Yardımcı Hizmetler",
                            Status = 0
                        },
                        new
                        {
                            ID = 2,
                            DepartmentName = "Bilgi İşlem",
                            Status = 0
                        },
                        new
                        {
                            ID = 3,
                            DepartmentName = "Mutfak",
                            Status = 0
                        },
                        new
                        {
                            ID = 4,
                            DepartmentName = "Resepsiyon",
                            Status = 0
                        },
                        new
                        {
                            ID = 5,
                            DepartmentName = "Yönetim",
                            Status = 0
                        },
                        new
                        {
                            ID = 6,
                            DepartmentName = "İnsan Kaynakları",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Employee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EmployeeStatus")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("HourlyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("IdentificationNumber")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("LeavingWorkDate")
                        .HasColumnType("date");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("MonthlySalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ReasonForLeaving")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("StartDateOfWork")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AppUserId");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DepartmentID = 4,
                            Email = "Krista_OKon@hotmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Krista",
                            HourlyRate = 190.3986852338531450m,
                            IdentificationNumber = "7902",
                            IsActive = true,
                            LastName = "O'Kon",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2021, 3, 4, 16, 23, 49, 550, DateTimeKind.Unspecified).AddTicks(3970),
                            Status = 0,
                            Title = "Resepsiyonist",
                            UserID = 0
                        },
                        new
                        {
                            ID = 2,
                            DepartmentID = 4,
                            Email = "Joey.Maggio@hotmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Joey",
                            HourlyRate = 195.848147797327560m,
                            IdentificationNumber = "2768",
                            IsActive = true,
                            LastName = "Maggio",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2020, 5, 11, 14, 44, 41, 131, DateTimeKind.Unspecified).AddTicks(9521),
                            Status = 0,
                            Title = "Resepsiyonist",
                            UserID = 0
                        },
                        new
                        {
                            ID = 3,
                            DepartmentID = 4,
                            Email = "Rickey14@yahoo.com",
                            EmployeeStatus = 3,
                            FirstName = "Rickey",
                            HourlyRate = 195.404236682413260m,
                            IdentificationNumber = "6071",
                            IsActive = true,
                            LastName = "Borer",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2021, 8, 2, 7, 59, 20, 886, DateTimeKind.Unspecified).AddTicks(8348),
                            Status = 0,
                            Title = "Resepsiyonist",
                            UserID = 0
                        },
                        new
                        {
                            ID = 4,
                            DepartmentID = 4,
                            Email = "Santos_Bauch@hotmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Santos",
                            HourlyRate = 197.224682917457390m,
                            IdentificationNumber = "6451",
                            IsActive = true,
                            LastName = "Bauch",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2022, 3, 28, 1, 44, 53, 321, DateTimeKind.Unspecified).AddTicks(5565),
                            Status = 0,
                            Title = "Resepsiyonist",
                            UserID = 0
                        },
                        new
                        {
                            ID = 5,
                            DepartmentID = 4,
                            Email = "Terrell36@hotmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Terrell",
                            HourlyRate = 198.024257471796240m,
                            IdentificationNumber = "7174",
                            IsActive = true,
                            LastName = "Kulas",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2020, 10, 30, 14, 48, 47, 198, DateTimeKind.Unspecified).AddTicks(3812),
                            Status = 0,
                            Title = "Resepsiyonist",
                            UserID = 0
                        },
                        new
                        {
                            ID = 6,
                            DepartmentID = 4,
                            Email = "Verna42@gmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Verna",
                            HourlyRate = 190.347900870418130m,
                            IdentificationNumber = "8123",
                            IsActive = true,
                            LastName = "Champlin",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2020, 3, 1, 14, 53, 39, 200, DateTimeKind.Unspecified).AddTicks(7734),
                            Status = 0,
                            Title = "Resepsiyonist",
                            UserID = 0
                        },
                        new
                        {
                            ID = 7,
                            DepartmentID = 4,
                            Email = "Bill.Koepp65@hotmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Bill",
                            HourlyRate = 195.273078687150530m,
                            IdentificationNumber = "5193",
                            IsActive = true,
                            LastName = "Koepp",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2019, 1, 13, 3, 14, 11, 103, DateTimeKind.Unspecified).AddTicks(1468),
                            Status = 0,
                            Title = "Resepsiyonist",
                            UserID = 0
                        },
                        new
                        {
                            ID = 8,
                            DepartmentID = 1,
                            Email = "Traci.Olson60@gmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Traci",
                            HourlyRate = 197.816420550372650m,
                            IdentificationNumber = "6373",
                            IsActive = true,
                            LastName = "Olson",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2021, 3, 12, 9, 15, 12, 563, DateTimeKind.Unspecified).AddTicks(2295),
                            Status = 0,
                            Title = "Temizlik Görevlisi",
                            UserID = 0
                        },
                        new
                        {
                            ID = 9,
                            DepartmentID = 1,
                            Email = "Vicky6@hotmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Vicky",
                            HourlyRate = 196.345612717022010m,
                            IdentificationNumber = "2290",
                            IsActive = true,
                            LastName = "Larkin",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2021, 10, 21, 21, 40, 36, 189, DateTimeKind.Unspecified).AddTicks(3726),
                            Status = 0,
                            Title = "Temizlik Görevlisi",
                            UserID = 0
                        },
                        new
                        {
                            ID = 10,
                            DepartmentID = 1,
                            Email = "Juana.Davis49@gmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Juana",
                            HourlyRate = 199.351237169164810m,
                            IdentificationNumber = "4277",
                            IsActive = true,
                            LastName = "Davis",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2021, 5, 21, 14, 16, 4, 920, DateTimeKind.Unspecified).AddTicks(7013),
                            Status = 0,
                            Title = "Temizlik Görevlisi",
                            UserID = 0
                        },
                        new
                        {
                            ID = 11,
                            DepartmentID = 1,
                            Email = "Teresa61@hotmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Teresa",
                            HourlyRate = 197.668263152087230m,
                            IdentificationNumber = "2171",
                            IsActive = true,
                            LastName = "Emard",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2020, 5, 12, 23, 23, 37, 560, DateTimeKind.Unspecified).AddTicks(3843),
                            Status = 0,
                            Title = "Temizlik Görevlisi",
                            UserID = 0
                        },
                        new
                        {
                            ID = 12,
                            DepartmentID = 1,
                            Email = "Pearl.Beatty92@hotmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Pearl",
                            HourlyRate = 196.244880010487920m,
                            IdentificationNumber = "6688",
                            IsActive = true,
                            LastName = "Beatty",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2020, 12, 10, 0, 38, 0, 426, DateTimeKind.Unspecified).AddTicks(740),
                            Status = 0,
                            Title = "Temizlik Görevlisi",
                            UserID = 0
                        },
                        new
                        {
                            ID = 13,
                            DepartmentID = 1,
                            Email = "Aaron.Hahn41@yahoo.com",
                            EmployeeStatus = 3,
                            FirstName = "Aaron",
                            HourlyRate = 190.904794605870170m,
                            IdentificationNumber = "6138",
                            IsActive = true,
                            LastName = "Hahn",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2021, 3, 27, 19, 44, 31, 551, DateTimeKind.Unspecified).AddTicks(6403),
                            Status = 0,
                            Title = "Temizlik Görevlisi",
                            UserID = 0
                        },
                        new
                        {
                            ID = 14,
                            DepartmentID = 1,
                            Email = "Shane37@gmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Shane",
                            HourlyRate = 191.521682800502370m,
                            IdentificationNumber = "7916",
                            IsActive = true,
                            LastName = "Stark",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2019, 10, 11, 14, 38, 57, 815, DateTimeKind.Unspecified).AddTicks(553),
                            Status = 0,
                            Title = "Temizlik Görevlisi",
                            UserID = 0
                        },
                        new
                        {
                            ID = 15,
                            DepartmentID = 1,
                            Email = "Lynette_Dach@yahoo.com",
                            EmployeeStatus = 3,
                            FirstName = "Lynette",
                            HourlyRate = 190.5565860497563080m,
                            IdentificationNumber = "2596",
                            IsActive = true,
                            LastName = "Dach",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2021, 4, 28, 16, 5, 15, 498, DateTimeKind.Unspecified).AddTicks(8164),
                            Status = 0,
                            Title = "Temizlik Görevlisi",
                            UserID = 0
                        },
                        new
                        {
                            ID = 16,
                            DepartmentID = 1,
                            Email = "Flora.Treutel@gmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Flora",
                            HourlyRate = 194.092970692595920m,
                            IdentificationNumber = "8088",
                            IsActive = true,
                            LastName = "Treutel",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2020, 2, 28, 7, 28, 9, 587, DateTimeKind.Unspecified).AddTicks(5884),
                            Status = 0,
                            Title = "Temizlik Görevlisi",
                            UserID = 0
                        },
                        new
                        {
                            ID = 17,
                            DepartmentID = 1,
                            Email = "Naomi.Berge@gmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Naomi",
                            HourlyRate = 194.597296521345760m,
                            IdentificationNumber = "8709",
                            IsActive = true,
                            LastName = "Berge",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2019, 4, 1, 10, 31, 30, 465, DateTimeKind.Unspecified).AddTicks(922),
                            Status = 0,
                            Title = "Temizlik Görevlisi",
                            UserID = 0
                        },
                        new
                        {
                            ID = 18,
                            DepartmentID = 1,
                            Email = "Orlando57@yahoo.com",
                            EmployeeStatus = 3,
                            FirstName = "Orlando",
                            HourlyRate = 199.258762211193680m,
                            IdentificationNumber = "5308",
                            IsActive = true,
                            LastName = "Metz",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2022, 2, 15, 10, 5, 40, 913, DateTimeKind.Unspecified).AddTicks(4646),
                            Status = 0,
                            Title = "Temizlik Görevlisi",
                            UserID = 0
                        },
                        new
                        {
                            ID = 19,
                            DepartmentID = 3,
                            Email = "Lucille_OKon45@hotmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Lucille",
                            HourlyRate = 191.618999508963430m,
                            IdentificationNumber = "6600",
                            IsActive = true,
                            LastName = "O'Kon",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2019, 10, 19, 5, 44, 59, 596, DateTimeKind.Unspecified).AddTicks(8966),
                            Status = 0,
                            Title = "Aşçı",
                            UserID = 0
                        },
                        new
                        {
                            ID = 20,
                            DepartmentID = 3,
                            Email = "Kenneth_Rogahn@gmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Kenneth",
                            HourlyRate = 196.829359380914530m,
                            IdentificationNumber = "5397",
                            IsActive = true,
                            LastName = "Rogahn",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2020, 4, 17, 17, 30, 1, 917, DateTimeKind.Unspecified).AddTicks(7500),
                            Status = 0,
                            Title = "Aşçı",
                            UserID = 0
                        },
                        new
                        {
                            ID = 21,
                            DepartmentID = 3,
                            Email = "Geneva.Ebert43@yahoo.com",
                            EmployeeStatus = 3,
                            FirstName = "Geneva",
                            HourlyRate = 194.135311573806830m,
                            IdentificationNumber = "4235",
                            IsActive = true,
                            LastName = "Ebert",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2019, 5, 13, 10, 5, 44, 65, DateTimeKind.Unspecified).AddTicks(5174),
                            Status = 0,
                            Title = "Aşçı",
                            UserID = 0
                        },
                        new
                        {
                            ID = 22,
                            DepartmentID = 3,
                            Email = "Amanda_Hermann68@yahoo.com",
                            EmployeeStatus = 3,
                            FirstName = "Amanda",
                            HourlyRate = 195.677401654272060m,
                            IdentificationNumber = "6310",
                            IsActive = true,
                            LastName = "Hermann",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2020, 6, 19, 8, 58, 5, 791, DateTimeKind.Unspecified).AddTicks(8534),
                            Status = 0,
                            Title = "Aşçı",
                            UserID = 0
                        },
                        new
                        {
                            ID = 23,
                            DepartmentID = 3,
                            Email = "Hilda.Mertz87@gmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Hilda",
                            HourlyRate = 192.680213382784380m,
                            IdentificationNumber = "6136",
                            IsActive = true,
                            LastName = "Mertz",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2019, 3, 17, 4, 21, 45, 323, DateTimeKind.Unspecified).AddTicks(5681),
                            Status = 0,
                            Title = "Aşçı",
                            UserID = 0
                        },
                        new
                        {
                            ID = 24,
                            DepartmentID = 3,
                            Email = "Beatrice97@gmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Beatrice",
                            HourlyRate = 194.145601756938550m,
                            IdentificationNumber = "5743",
                            IsActive = true,
                            LastName = "Fisher",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2021, 5, 11, 8, 32, 40, 674, DateTimeKind.Unspecified).AddTicks(8672),
                            Status = 0,
                            Title = "Aşçı",
                            UserID = 0
                        },
                        new
                        {
                            ID = 25,
                            DepartmentID = 3,
                            Email = "Vanessa_Bauch@gmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Vanessa",
                            HourlyRate = 195.870663498468080m,
                            IdentificationNumber = "1450",
                            IsActive = true,
                            LastName = "Bauch",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2019, 11, 25, 16, 19, 24, 179, DateTimeKind.Unspecified).AddTicks(4536),
                            Status = 0,
                            Title = "Aşçı",
                            UserID = 0
                        },
                        new
                        {
                            ID = 26,
                            DepartmentID = 3,
                            Email = "Louis75@hotmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Louis",
                            HourlyRate = 198.879284578784970m,
                            IdentificationNumber = "5873",
                            IsActive = true,
                            LastName = "Quigley",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2022, 2, 25, 1, 50, 55, 916, DateTimeKind.Unspecified).AddTicks(3374),
                            Status = 0,
                            Title = "Aşçı",
                            UserID = 0
                        },
                        new
                        {
                            ID = 27,
                            DepartmentID = 3,
                            Email = "Damon.OHara47@gmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Damon",
                            HourlyRate = 190.1535706222772460m,
                            IdentificationNumber = "9655",
                            IsActive = true,
                            LastName = "O'Hara",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2019, 11, 16, 16, 59, 47, 86, DateTimeKind.Unspecified).AddTicks(4139),
                            Status = 0,
                            Title = "Aşçı",
                            UserID = 0
                        },
                        new
                        {
                            ID = 28,
                            DepartmentID = 3,
                            Email = "Sally.Quitzon31@yahoo.com",
                            EmployeeStatus = 3,
                            FirstName = "Sally",
                            HourlyRate = 193.770521373381150m,
                            IdentificationNumber = "5104",
                            IsActive = true,
                            LastName = "Quitzon",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2021, 12, 21, 3, 34, 52, 137, DateTimeKind.Unspecified).AddTicks(8156),
                            Status = 0,
                            Title = "Aşçı",
                            UserID = 0
                        },
                        new
                        {
                            ID = 29,
                            DepartmentID = 3,
                            Email = "Anita_Fahey@gmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Anita",
                            HourlyRate = 191.809149539009270m,
                            IdentificationNumber = "5571",
                            IsActive = true,
                            LastName = "Fahey",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2020, 7, 3, 8, 55, 6, 61, DateTimeKind.Unspecified).AddTicks(7544),
                            Status = 0,
                            Title = "Aşçı",
                            UserID = 0
                        },
                        new
                        {
                            ID = 30,
                            DepartmentID = 3,
                            Email = "Jerome.Price28@hotmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Jerome",
                            HourlyRate = 195.166170422530810m,
                            IdentificationNumber = "8211",
                            IsActive = true,
                            LastName = "Price",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2021, 12, 30, 14, 25, 1, 32, DateTimeKind.Unspecified).AddTicks(9102),
                            Status = 0,
                            Title = "Garson",
                            UserID = 0
                        },
                        new
                        {
                            ID = 31,
                            DepartmentID = 3,
                            Email = "Lynn_Windler90@yahoo.com",
                            EmployeeStatus = 3,
                            FirstName = "Lynn",
                            HourlyRate = 195.405343265927090m,
                            IdentificationNumber = "4704",
                            IsActive = true,
                            LastName = "Windler",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2022, 2, 3, 2, 18, 53, 110, DateTimeKind.Unspecified).AddTicks(574),
                            Status = 0,
                            Title = "Garson",
                            UserID = 0
                        },
                        new
                        {
                            ID = 32,
                            DepartmentID = 3,
                            Email = "Carl_Schinner@hotmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Carl",
                            HourlyRate = 190.1698781131626470m,
                            IdentificationNumber = "9501",
                            IsActive = true,
                            LastName = "Schinner",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2020, 3, 19, 12, 54, 29, 797, DateTimeKind.Unspecified).AddTicks(4218),
                            Status = 0,
                            Title = "Garson",
                            UserID = 0
                        },
                        new
                        {
                            ID = 33,
                            DepartmentID = 3,
                            Email = "Michelle.Jenkins@hotmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Michelle",
                            HourlyRate = 194.370815080763220m,
                            IdentificationNumber = "1979",
                            IsActive = true,
                            LastName = "Jenkins",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2021, 5, 25, 6, 5, 27, 186, DateTimeKind.Unspecified).AddTicks(9379),
                            Status = 0,
                            Title = "Garson",
                            UserID = 0
                        },
                        new
                        {
                            ID = 34,
                            DepartmentID = 3,
                            Email = "Yvette_Bogan58@yahoo.com",
                            EmployeeStatus = 3,
                            FirstName = "Yvette",
                            HourlyRate = 192.182844324122580m,
                            IdentificationNumber = "3891",
                            IsActive = true,
                            LastName = "Bogan",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2020, 11, 29, 0, 58, 27, 912, DateTimeKind.Unspecified).AddTicks(4908),
                            Status = 0,
                            Title = "Garson",
                            UserID = 0
                        },
                        new
                        {
                            ID = 35,
                            DepartmentID = 3,
                            Email = "Nellie.Schoen38@yahoo.com",
                            EmployeeStatus = 3,
                            FirstName = "Nellie",
                            HourlyRate = 199.621865460473050m,
                            IdentificationNumber = "8218",
                            IsActive = true,
                            LastName = "Schoen",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2020, 6, 7, 21, 39, 5, 387, DateTimeKind.Unspecified).AddTicks(4784),
                            Status = 0,
                            Title = "Garson",
                            UserID = 0
                        },
                        new
                        {
                            ID = 36,
                            DepartmentID = 3,
                            Email = "Henry_Yost63@gmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Henry",
                            HourlyRate = 190.7856894195013160m,
                            IdentificationNumber = "6555",
                            IsActive = true,
                            LastName = "Yost",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2021, 9, 17, 14, 27, 54, 846, DateTimeKind.Unspecified).AddTicks(2494),
                            Status = 0,
                            Title = "Garson",
                            UserID = 0
                        },
                        new
                        {
                            ID = 37,
                            DepartmentID = 3,
                            Email = "Gabriel_Stroman7@hotmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Gabriel",
                            HourlyRate = 199.25808270892970m,
                            IdentificationNumber = "6329",
                            IsActive = true,
                            LastName = "Stroman",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2020, 12, 31, 5, 18, 42, 725, DateTimeKind.Unspecified).AddTicks(6590),
                            Status = 0,
                            Title = "Garson",
                            UserID = 0
                        },
                        new
                        {
                            ID = 38,
                            DepartmentID = 3,
                            Email = "Arnold15@hotmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Arnold",
                            HourlyRate = 196.000611300580490m,
                            IdentificationNumber = "4771",
                            IsActive = true,
                            LastName = "Ullrich",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2021, 5, 19, 4, 31, 23, 345, DateTimeKind.Unspecified).AddTicks(6108),
                            Status = 0,
                            Title = "Garson",
                            UserID = 0
                        },
                        new
                        {
                            ID = 39,
                            DepartmentID = 3,
                            Email = "Rita_Walter89@hotmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Rita",
                            HourlyRate = 196.401516625844650m,
                            IdentificationNumber = "6811",
                            IsActive = true,
                            LastName = "Walter",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2020, 9, 25, 4, 56, 12, 64, DateTimeKind.Unspecified).AddTicks(726),
                            Status = 0,
                            Title = "Garson",
                            UserID = 0
                        },
                        new
                        {
                            ID = 40,
                            DepartmentID = 3,
                            Email = "Bob_Emmerich36@yahoo.com",
                            EmployeeStatus = 3,
                            FirstName = "Bob",
                            HourlyRate = 198.37136672268220m,
                            IdentificationNumber = "5366",
                            IsActive = true,
                            LastName = "Emmerich",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2021, 1, 25, 12, 20, 16, 621, DateTimeKind.Unspecified).AddTicks(6680),
                            Status = 0,
                            Title = "Garson",
                            UserID = 0
                        },
                        new
                        {
                            ID = 41,
                            DepartmentID = 3,
                            Email = "Valerie.Kris@yahoo.com",
                            EmployeeStatus = 3,
                            FirstName = "Valerie",
                            HourlyRate = 191.347131850825220m,
                            IdentificationNumber = "5277",
                            IsActive = true,
                            LastName = "Kris",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2021, 11, 7, 20, 9, 44, 65, DateTimeKind.Unspecified).AddTicks(4968),
                            Status = 0,
                            Title = "Garson",
                            UserID = 0
                        },
                        new
                        {
                            ID = 42,
                            DepartmentID = 3,
                            Email = "Shaun_Sawayn@hotmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Shaun",
                            HourlyRate = 192.517399356010090m,
                            IdentificationNumber = "3591",
                            IsActive = true,
                            LastName = "Sawayn",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2022, 1, 12, 5, 10, 26, 241, DateTimeKind.Unspecified).AddTicks(3779),
                            Status = 0,
                            Title = "Garson",
                            UserID = 0
                        },
                        new
                        {
                            ID = 43,
                            DepartmentID = 1,
                            Email = "Delbert_Tillman20@yahoo.com",
                            EmployeeStatus = 3,
                            FirstName = "Delbert",
                            HourlyRate = 196.766186629778790m,
                            IdentificationNumber = "4763",
                            IsActive = true,
                            LastName = "Tillman",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2021, 1, 18, 17, 44, 50, 939, DateTimeKind.Unspecified).AddTicks(6812),
                            Status = 0,
                            Title = "Elektirikçi",
                            UserID = 0
                        },
                        new
                        {
                            ID = 44,
                            DepartmentID = 2,
                            Email = "Gail36@yahoo.com",
                            EmployeeStatus = 3,
                            FirstName = "Gail",
                            HourlyRate = 191.599017042479950m,
                            IdentificationNumber = "9029",
                            IsActive = true,
                            LastName = "Heller",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2020, 5, 26, 21, 45, 14, 769, DateTimeKind.Unspecified).AddTicks(8277),
                            Status = 0,
                            Title = "Bilgi İşlem Sorumlusu",
                            UserID = 0
                        },
                        new
                        {
                            ID = 45,
                            DepartmentID = 5,
                            Email = "Leland_Hand@hotmail.com",
                            EmployeeStatus = 0,
                            FirstName = "Leland",
                            HourlyRate = 199.442897364237760m,
                            IdentificationNumber = "7230",
                            IsActive = true,
                            LastName = "Hand",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2021, 4, 5, 3, 30, 21, 506, DateTimeKind.Unspecified).AddTicks(3940),
                            Status = 0,
                            Title = "Müdür",
                            UserID = 0
                        },
                        new
                        {
                            ID = 46,
                            DepartmentID = 6,
                            Email = "Roosevelt.Beier@hotmail.com",
                            EmployeeStatus = 1,
                            FirstName = "Roosevelt",
                            HourlyRate = 195.634146503002450m,
                            IdentificationNumber = "2874",
                            IsActive = true,
                            LastName = "Beier",
                            PhoneNumber = "05454526235",
                            StartDateOfWork = new DateTime(2019, 2, 21, 15, 50, 37, 597, DateTimeKind.Unspecified).AddTicks(6251),
                            Status = 0,
                            Title = "İnsan Kaynakları Müdürü",
                            UserID = 0
                        });
                });

            modelBuilder.Entity("Entities.Concrete.EmployeeShift", b =>
                {
                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<int>("ShiftID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("EmployeeID", "ShiftID");

                    b.HasIndex("ShiftID");

                    b.ToTable("EmployeesShifts");

                    b.HasData(
                        new
                        {
                            EmployeeID = 1,
                            ShiftID = 1,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 2,
                            ShiftID = 1,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 3,
                            ShiftID = 1,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 4,
                            ShiftID = 2,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 5,
                            ShiftID = 2,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 6,
                            ShiftID = 3,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 7,
                            ShiftID = 3,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 8,
                            ShiftID = 1,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 9,
                            ShiftID = 1,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 10,
                            ShiftID = 1,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 11,
                            ShiftID = 1,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 12,
                            ShiftID = 1,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 13,
                            ShiftID = 1,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 14,
                            ShiftID = 2,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 15,
                            ShiftID = 2,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 16,
                            ShiftID = 2,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 17,
                            ShiftID = 2,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 18,
                            ShiftID = 2,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 19,
                            ShiftID = 1,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 20,
                            ShiftID = 1,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 21,
                            ShiftID = 1,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 22,
                            ShiftID = 1,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 23,
                            ShiftID = 1,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 24,
                            ShiftID = 1,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 25,
                            ShiftID = 2,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 26,
                            ShiftID = 2,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 27,
                            ShiftID = 2,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 28,
                            ShiftID = 2,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 29,
                            ShiftID = 2,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 30,
                            ShiftID = 1,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 31,
                            ShiftID = 1,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 32,
                            ShiftID = 1,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 33,
                            ShiftID = 1,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 34,
                            ShiftID = 1,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 35,
                            ShiftID = 1,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 36,
                            ShiftID = 1,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 37,
                            ShiftID = 2,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 38,
                            ShiftID = 2,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 39,
                            ShiftID = 2,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 40,
                            ShiftID = 2,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 41,
                            ShiftID = 2,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 42,
                            ShiftID = 2,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 43,
                            ShiftID = 1,
                            Status = 0
                        },
                        new
                        {
                            EmployeeID = 44,
                            ShiftID = 1,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Entities.Concrete.ExtraService", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ID");

                    b.ToTable("ExtraServices");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Price = 600m,
                            ServiceName = "Sauna",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Entities.Concrete.FacilityOfRoom", b =>
                {
                    b.Property<int>("RoomFacilityID")
                        .HasColumnType("int");

                    b.Property<int>("RoomTypeID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("RoomFacilityID", "RoomTypeID");

                    b.HasIndex("RoomTypeID");

                    b.ToTable("FacilitiesOfRooms");

                    b.HasData(
                        new
                        {
                            RoomFacilityID = 1,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 2,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 3,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 4,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 1,
                            RoomTypeID = 2,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 2,
                            RoomTypeID = 2,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 3,
                            RoomTypeID = 2,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 4,
                            RoomTypeID = 2,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 5,
                            RoomTypeID = 2,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 1,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 2,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 3,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 4,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 6,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 1,
                            RoomTypeID = 4,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 2,
                            RoomTypeID = 4,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 3,
                            RoomTypeID = 4,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 4,
                            RoomTypeID = 4,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 5,
                            RoomTypeID = 4,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 1,
                            RoomTypeID = 5,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 2,
                            RoomTypeID = 5,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 3,
                            RoomTypeID = 5,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 4,
                            RoomTypeID = 5,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 5,
                            RoomTypeID = 5,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 6,
                            RoomTypeID = 5,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 1,
                            RoomTypeID = 6,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 2,
                            RoomTypeID = 6,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 3,
                            RoomTypeID = 6,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 4,
                            RoomTypeID = 6,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 5,
                            RoomTypeID = 6,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 6,
                            RoomTypeID = 6,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 1,
                            RoomTypeID = 7,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 2,
                            RoomTypeID = 7,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 3,
                            RoomTypeID = 7,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 4,
                            RoomTypeID = 7,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 5,
                            RoomTypeID = 7,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 6,
                            RoomTypeID = 7,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Guest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IdCardBackSideImage")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("IdCardFrontSideImage")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ID");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("Entities.Concrete.GuestRegistration", b =>
                {
                    b.Property<int>("RegistrationID")
                        .HasColumnType("int");

                    b.Property<int>("GuestID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("RegistrationID", "GuestID");

                    b.HasIndex("GuestID");

                    b.ToTable("GuestRegistration");
                });

            modelBuilder.Entity("Entities.Concrete.HomePage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Paragraph1")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Paragraph2")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Paragraph3")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Paragraph4")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Paragraph5")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Subtitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("HomePages");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Paragraph1 = "Bilge Hotel Thermal Spa & Convention Center; Kemer şehir merkezinde, güler yüzlü ve profesyonel ekibi ile beklentilerin üzerinde hizmet vermektedir.",
                            Paragraph2 = "Bilge Hotel 35 yıllık deneyimi, misafir memnuniyeti odaklı hizmet anlayışı ile sizleri kaliteye ve konfora davet ediyor.",
                            PictureUrl = "/img/homepage-img.jpg",
                            Status = 0,
                            Subtitle = "Bilge Hotel'e Hoşgeldiniz...",
                            Title = "Kalite ve Konfor"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.HomePageSlide", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("HomePageID")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PictureName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ID");

                    b.HasIndex("HomePageID");

                    b.ToTable("HomePageSlides");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            HomePageID = 1,
                            PictureName = "Slide1",
                            PictureUrl = "https://www.almira.com.tr/images/genel1.jpg",
                            Status = 0
                        },
                        new
                        {
                            ID = 2,
                            HomePageID = 1,
                            PictureName = "Slide2",
                            PictureUrl = "https://www.almira.com.tr/images/gallery/almira/04.jpg",
                            Status = 0
                        },
                        new
                        {
                            ID = 3,
                            HomePageID = 1,
                            PictureName = "Slide3",
                            PictureUrl = "https://www.almira.com.tr/images/gallery/almira/07.jpg",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Entities.Concrete.HotelService", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("IconPicture")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SettingID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ID");

                    b.HasIndex("SettingID");

                    b.ToTable("HotelServices");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            IconPicture = "https://roof264.com/media/image/mobil/oda-servisi.jpg",
                            ServiceName = "Oda Servisi",
                            SettingID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 2,
                            IconPicture = "https://roof264.com/media/image/mobil/ucretsiz-wi-fi.jpg",
                            ServiceName = "Ücretsiz Wifi",
                            SettingID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 3,
                            IconPicture = "https://roof264.com/media/image/mobil/camasir-yikama.jpg",
                            ServiceName = "Çamaşır Yıkama",
                            SettingID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 4,
                            IconPicture = "https://roof264.com/media/image/mobil/oda-ici-kasa.jpg",
                            ServiceName = "Kasa",
                            SettingID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 5,
                            IconPicture = "https://roof264.com/media/image/mobil/toplanti-olanaklari-max-10.jpg",
                            ServiceName = "Toplantı Olanakları",
                            SettingID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 6,
                            IconPicture = "https://roof264.com/media/image/mobil/bagaj-depolama.jpg",
                            ServiceName = "Bagaj Depolama",
                            SettingID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 7,
                            IconPicture = "https://roof264.com/media/image/mobil/hizli-c-in-c-out.jpg",
                            ServiceName = "Hızlı C in / C out",
                            SettingID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 8,
                            IconPicture = "https://roof264.com/media/image/mobil/kuru-temizleme.jpg",
                            ServiceName = "Kuru Temizleme",
                            SettingID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 9,
                            IconPicture = "https://roof264.com/media/image/mobil/bebek-karyolasi.jpg",
                            ServiceName = "Bebek Karyolası",
                            SettingID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 10,
                            IconPicture = "https://roof264.com/media/image/mobil/aile-odasi.jpg",
                            ServiceName = "Aile Odası",
                            SettingID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 11,
                            IconPicture = "https://roof264.com/media/image/mobil/sicak-kahvalti.jpg",
                            ServiceName = "Sıcak Kahvaltı",
                            SettingID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 12,
                            IconPicture = "https://roof264.com/media/image/mobil/merkezi-konum.jpg",
                            ServiceName = "Merkezi Konum",
                            SettingID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 13,
                            IconPicture = "https://roof264.com/media/image/mobil/ucretsiz-acik-kapali-otopark.jpg",
                            ServiceName = "Ücretsiz Açık / Kapalı Otopark",
                            SettingID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 14,
                            IconPicture = "https://roof264.com/media/image/mobil/utu-hizmeti.jpg",
                            ServiceName = "Ütü Hizmeti",
                            SettingID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 15,
                            IconPicture = "https://roof264.com/media/image/mobil/cay-kahve-hizmeti.jpg",
                            ServiceName = "Çay - Kahve Hizmeti",
                            SettingID = 1,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Income", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RegistrationID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("RegistrationID");

                    b.ToTable("Incomes");
                });

            modelBuilder.Entity("Entities.Concrete.Message", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("AppUserID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Entities.Concrete.Picture", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AboutusID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PictureName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ID");

                    b.HasIndex("AboutusID");

                    b.ToTable("Pictures");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AboutusID = 1,
                            PictureName = "Görsel1",
                            PictureUrl = "/img/gallery/room-single.jpg",
                            Status = 0
                        },
                        new
                        {
                            ID = 2,
                            AboutusID = 1,
                            PictureName = "Görsel2",
                            PictureUrl = "/img/gallery/room-double.jpg",
                            Status = 0
                        },
                        new
                        {
                            ID = 3,
                            AboutusID = 1,
                            PictureName = "Görsel3",
                            PictureUrl = "/img/gallery/room-double-superrior.jpg",
                            Status = 0
                        },
                        new
                        {
                            ID = 4,
                            AboutusID = 1,
                            PictureName = "Görsel4",
                            PictureUrl = "/img/gallery/room-triple.jpg",
                            Status = 0
                        },
                        new
                        {
                            ID = 5,
                            AboutusID = 1,
                            PictureName = "Görsel5",
                            PictureUrl = "/img/gallery/room-triple-superrior.jpg",
                            Status = 0
                        },
                        new
                        {
                            ID = 6,
                            AboutusID = 1,
                            PictureName = "Görsel6",
                            PictureUrl = "/img/gallery/room-family.jpg",
                            Status = 0
                        },
                        new
                        {
                            ID = 7,
                            AboutusID = 1,
                            PictureName = "Görsel7",
                            PictureUrl = "/img/gallery/room-presidential-suite.jpg",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Entities.Concrete.ReceptionReservation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("date");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NumberOfPeople")
                        .HasColumnType("int");

                    b.Property<bool>("Payment")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ReservationStatus")
                        .HasColumnType("int");

                    b.Property<int>("ReservationType")
                        .HasColumnType("int");

                    b.Property<int>("RoomID")
                        .HasColumnType("int");

                    b.Property<int?>("RoomTypeID")
                        .HasColumnType("int");

                    b.Property<int>("ServicePackID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ID");

                    b.HasIndex("RoomID");

                    b.HasIndex("RoomTypeID");

                    b.HasIndex("ServicePackID");

                    b.ToTable("ReceptionReservations");
                });

            modelBuilder.Entity("Entities.Concrete.Registration", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("CheckInTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time")
                        .HasDefaultValue(new TimeSpan(0, 14, 0, 0, 0));

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("date");

                    b.Property<TimeSpan?>("CheckOutTime")
                        .HasColumnType("time");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NumberOfPeople")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RegistrationStatus")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationType")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<int?>("ReservationID")
                        .HasColumnType("int");

                    b.Property<int>("RoomID")
                        .HasColumnType("int");

                    b.Property<int>("ServicePackID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ID");

                    b.HasIndex("RoomID");

                    b.HasIndex("ServicePackID");

                    b.ToTable("Registrations");
                });

            modelBuilder.Entity("Entities.Concrete.Room", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoomStatus")
                        .HasColumnType("int");

                    b.Property<int>("RoomTypeID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ID");

                    b.HasIndex("RoomTypeID");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            FloorNumber = 1,
                            RoomNumber = "100",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 2,
                            FloorNumber = 1,
                            RoomNumber = "101",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 3,
                            FloorNumber = 1,
                            RoomNumber = "102",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 4,
                            FloorNumber = 1,
                            RoomNumber = "103",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 5,
                            FloorNumber = 1,
                            RoomNumber = "104",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 6,
                            FloorNumber = 1,
                            RoomNumber = "105",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 7,
                            FloorNumber = 1,
                            RoomNumber = "106",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 8,
                            FloorNumber = 1,
                            RoomNumber = "107",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 9,
                            FloorNumber = 1,
                            RoomNumber = "108",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 10,
                            FloorNumber = 1,
                            RoomNumber = "109",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 11,
                            FloorNumber = 1,
                            RoomNumber = "110",
                            RoomStatus = 5,
                            RoomTypeID = 4,
                            Status = 0
                        },
                        new
                        {
                            ID = 12,
                            FloorNumber = 1,
                            RoomNumber = "111",
                            RoomStatus = 5,
                            RoomTypeID = 4,
                            Status = 0
                        },
                        new
                        {
                            ID = 13,
                            FloorNumber = 1,
                            RoomNumber = "112",
                            RoomStatus = 5,
                            RoomTypeID = 4,
                            Status = 0
                        },
                        new
                        {
                            ID = 14,
                            FloorNumber = 1,
                            RoomNumber = "113",
                            RoomStatus = 5,
                            RoomTypeID = 4,
                            Status = 0
                        },
                        new
                        {
                            ID = 15,
                            FloorNumber = 1,
                            RoomNumber = "114",
                            RoomStatus = 5,
                            RoomTypeID = 4,
                            Status = 0
                        },
                        new
                        {
                            ID = 16,
                            FloorNumber = 1,
                            RoomNumber = "115",
                            RoomStatus = 5,
                            RoomTypeID = 4,
                            Status = 0
                        },
                        new
                        {
                            ID = 17,
                            FloorNumber = 1,
                            RoomNumber = "116",
                            RoomStatus = 5,
                            RoomTypeID = 4,
                            Status = 0
                        },
                        new
                        {
                            ID = 18,
                            FloorNumber = 1,
                            RoomNumber = "117",
                            RoomStatus = 5,
                            RoomTypeID = 4,
                            Status = 0
                        },
                        new
                        {
                            ID = 19,
                            FloorNumber = 1,
                            RoomNumber = "118",
                            RoomStatus = 5,
                            RoomTypeID = 4,
                            Status = 0
                        },
                        new
                        {
                            ID = 20,
                            FloorNumber = 1,
                            RoomNumber = "119",
                            RoomStatus = 5,
                            RoomTypeID = 4,
                            Status = 0
                        },
                        new
                        {
                            ID = 21,
                            FloorNumber = 2,
                            RoomNumber = "120",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 22,
                            FloorNumber = 2,
                            RoomNumber = "121",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 23,
                            FloorNumber = 2,
                            RoomNumber = "122",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 24,
                            FloorNumber = 2,
                            RoomNumber = "123",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 25,
                            FloorNumber = 2,
                            RoomNumber = "124",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 26,
                            FloorNumber = 2,
                            RoomNumber = "125",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 27,
                            FloorNumber = 2,
                            RoomNumber = "126",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 28,
                            FloorNumber = 2,
                            RoomNumber = "127",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 29,
                            FloorNumber = 2,
                            RoomNumber = "128",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 30,
                            FloorNumber = 2,
                            RoomNumber = "129",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 31,
                            FloorNumber = 2,
                            RoomNumber = "130",
                            RoomStatus = 5,
                            RoomTypeID = 2,
                            Status = 0
                        },
                        new
                        {
                            ID = 32,
                            FloorNumber = 2,
                            RoomNumber = "131",
                            RoomStatus = 5,
                            RoomTypeID = 2,
                            Status = 0
                        },
                        new
                        {
                            ID = 33,
                            FloorNumber = 2,
                            RoomNumber = "132",
                            RoomStatus = 5,
                            RoomTypeID = 2,
                            Status = 0
                        },
                        new
                        {
                            ID = 34,
                            FloorNumber = 2,
                            RoomNumber = "133",
                            RoomStatus = 5,
                            RoomTypeID = 2,
                            Status = 0
                        },
                        new
                        {
                            ID = 35,
                            FloorNumber = 2,
                            RoomNumber = "134",
                            RoomStatus = 5,
                            RoomTypeID = 2,
                            Status = 0
                        },
                        new
                        {
                            ID = 36,
                            FloorNumber = 2,
                            RoomNumber = "135",
                            RoomStatus = 5,
                            RoomTypeID = 2,
                            Status = 0
                        },
                        new
                        {
                            ID = 37,
                            FloorNumber = 2,
                            RoomNumber = "136",
                            RoomStatus = 5,
                            RoomTypeID = 2,
                            Status = 0
                        },
                        new
                        {
                            ID = 38,
                            FloorNumber = 2,
                            RoomNumber = "137",
                            RoomStatus = 5,
                            RoomTypeID = 2,
                            Status = 0
                        },
                        new
                        {
                            ID = 39,
                            FloorNumber = 2,
                            RoomNumber = "138",
                            RoomStatus = 5,
                            RoomTypeID = 2,
                            Status = 0
                        },
                        new
                        {
                            ID = 40,
                            FloorNumber = 2,
                            RoomNumber = "139",
                            RoomStatus = 5,
                            RoomTypeID = 2,
                            Status = 0
                        },
                        new
                        {
                            ID = 41,
                            FloorNumber = 3,
                            RoomNumber = "140",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 42,
                            FloorNumber = 3,
                            RoomNumber = "141",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 43,
                            FloorNumber = 3,
                            RoomNumber = "142",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 44,
                            FloorNumber = 3,
                            RoomNumber = "143",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 45,
                            FloorNumber = 3,
                            RoomNumber = "144",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 46,
                            FloorNumber = 3,
                            RoomNumber = "145",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 47,
                            FloorNumber = 3,
                            RoomNumber = "146",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 48,
                            FloorNumber = 3,
                            RoomNumber = "147",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 49,
                            FloorNumber = 3,
                            RoomNumber = "148",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 50,
                            FloorNumber = 3,
                            RoomNumber = "149",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 51,
                            FloorNumber = 3,
                            RoomNumber = "150",
                            RoomStatus = 5,
                            RoomTypeID = 5,
                            Status = 0
                        },
                        new
                        {
                            ID = 52,
                            FloorNumber = 3,
                            RoomNumber = "151",
                            RoomStatus = 5,
                            RoomTypeID = 5,
                            Status = 0
                        },
                        new
                        {
                            ID = 53,
                            FloorNumber = 3,
                            RoomNumber = "152",
                            RoomStatus = 5,
                            RoomTypeID = 5,
                            Status = 0
                        },
                        new
                        {
                            ID = 54,
                            FloorNumber = 3,
                            RoomNumber = "153",
                            RoomStatus = 5,
                            RoomTypeID = 5,
                            Status = 0
                        },
                        new
                        {
                            ID = 55,
                            FloorNumber = 3,
                            RoomNumber = "154",
                            RoomStatus = 5,
                            RoomTypeID = 5,
                            Status = 0
                        },
                        new
                        {
                            ID = 56,
                            FloorNumber = 3,
                            RoomNumber = "155",
                            RoomStatus = 5,
                            RoomTypeID = 5,
                            Status = 0
                        },
                        new
                        {
                            ID = 57,
                            FloorNumber = 3,
                            RoomNumber = "156",
                            RoomStatus = 5,
                            RoomTypeID = 5,
                            Status = 0
                        },
                        new
                        {
                            ID = 58,
                            FloorNumber = 3,
                            RoomNumber = "157",
                            RoomStatus = 5,
                            RoomTypeID = 5,
                            Status = 0
                        },
                        new
                        {
                            ID = 59,
                            FloorNumber = 3,
                            RoomNumber = "158",
                            RoomStatus = 5,
                            RoomTypeID = 5,
                            Status = 0
                        },
                        new
                        {
                            ID = 60,
                            FloorNumber = 3,
                            RoomNumber = "159",
                            RoomStatus = 5,
                            RoomTypeID = 5,
                            Status = 0
                        },
                        new
                        {
                            ID = 61,
                            FloorNumber = 4,
                            RoomNumber = "160",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 62,
                            FloorNumber = 4,
                            RoomNumber = "161",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 63,
                            FloorNumber = 4,
                            RoomNumber = "162",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 64,
                            FloorNumber = 4,
                            RoomNumber = "163",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 65,
                            FloorNumber = 4,
                            RoomNumber = "164",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 66,
                            FloorNumber = 4,
                            RoomNumber = "165",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 67,
                            FloorNumber = 4,
                            RoomNumber = "166",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 68,
                            FloorNumber = 4,
                            RoomNumber = "167",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 69,
                            FloorNumber = 4,
                            RoomNumber = "168",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 70,
                            FloorNumber = 4,
                            RoomNumber = "169",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 71,
                            FloorNumber = 4,
                            RoomNumber = "170",
                            RoomStatus = 5,
                            RoomTypeID = 6,
                            Status = 0
                        },
                        new
                        {
                            ID = 72,
                            FloorNumber = 4,
                            RoomNumber = "171",
                            RoomStatus = 5,
                            RoomTypeID = 6,
                            Status = 0
                        },
                        new
                        {
                            ID = 73,
                            FloorNumber = 4,
                            RoomNumber = "172",
                            RoomStatus = 5,
                            RoomTypeID = 6,
                            Status = 0
                        },
                        new
                        {
                            ID = 74,
                            FloorNumber = 4,
                            RoomNumber = "173",
                            RoomStatus = 5,
                            RoomTypeID = 6,
                            Status = 0
                        },
                        new
                        {
                            ID = 75,
                            FloorNumber = 4,
                            RoomNumber = "174",
                            RoomStatus = 5,
                            RoomTypeID = 6,
                            Status = 0
                        },
                        new
                        {
                            ID = 76,
                            FloorNumber = 4,
                            RoomNumber = "175",
                            RoomStatus = 5,
                            RoomTypeID = 6,
                            Status = 0
                        },
                        new
                        {
                            ID = 77,
                            FloorNumber = 4,
                            RoomNumber = "176",
                            RoomStatus = 5,
                            RoomTypeID = 7,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Entities.Concrete.RoomFacility", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FacilityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ID");

                    b.ToTable("RoomFacilities");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            FacilityName = "Klima",
                            Status = 0
                        },
                        new
                        {
                            ID = 2,
                            FacilityName = "Tv",
                            Status = 0
                        },
                        new
                        {
                            ID = 3,
                            FacilityName = "Saç Kurutma Makinesi",
                            Status = 0
                        },
                        new
                        {
                            ID = 4,
                            FacilityName = "Kablosuz Internet",
                            Status = 0
                        },
                        new
                        {
                            ID = 5,
                            FacilityName = "Minibar",
                            Status = 0
                        },
                        new
                        {
                            ID = 6,
                            FacilityName = "Balkon",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Entities.Concrete.RoomPicture", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("RoomTypeID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ID");

                    b.HasIndex("RoomTypeID");

                    b.ToTable("RoomPictures");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            PictureUrl = "/img/roomtypes/room-single.jpg",
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 2,
                            PictureUrl = "/img/roomtypes/room-double.jpg",
                            RoomTypeID = 2,
                            Status = 0
                        },
                        new
                        {
                            ID = 3,
                            PictureUrl = "/img/roomtypes/room-double-superrior.jpg",
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 4,
                            PictureUrl = "/img/roomtypes/room-triple.jpg",
                            RoomTypeID = 4,
                            Status = 0
                        },
                        new
                        {
                            ID = 5,
                            PictureUrl = "/img/roomtypes/room-triple-superrior.jpg",
                            RoomTypeID = 5,
                            Status = 0
                        },
                        new
                        {
                            ID = 6,
                            PictureUrl = "/img/roomtypes/room-family.jpg",
                            RoomTypeID = 6,
                            Status = 0
                        },
                        new
                        {
                            ID = 7,
                            PictureUrl = "/img/roomtypes/room-presidential-suite.jpg",
                            RoomTypeID = 7,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Entities.Concrete.RoomType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NumberOfBed")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfPeople")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RoomTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ID");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = "15 - 20 m² Single Room’da ihtiyaç duyabileceğiniz her şey sizin için düşünülmüştür. Park, şehir ve dağ manzaralı odalar iş ve tatil seyahatleriniz için ideal bir seçenek. Kullanışlı, modern bir tasarıma sahip odalarda tek kişilik bir adet yatak bulunmaktadır.",
                            NumberOfBed = 1,
                            NumberOfPeople = 1,
                            Price = 600m,
                            RoomTypeName = "Single Room",
                            Status = 0
                        },
                        new
                        {
                            ID = 2,
                            Description = "20 - 25 m² Double Room’da ihtiyaç duyabileceğiniz her şey sizin için düşünülmüştür. Park, şehir ve dağ manzaralı odalar iş ve tatil seyahatleriniz için ideal bir seçenek. Kullanışlı, modern bir tasarıma sahip odalarda tek kişilik iki adet yatak bulunmaktadır.",
                            NumberOfBed = 2,
                            NumberOfPeople = 2,
                            Price = 1050m,
                            RoomTypeName = "Double Room",
                            Status = 0
                        },
                        new
                        {
                            ID = 3,
                            Description = "20 - 25 m² Double Room’da ihtiyaç duyabileceğiniz her şey sizin için düşünülmüştür. Park, şehir ve dağ manzaralı odalar iş ve tatil seyahatleriniz için ideal bir seçenek. Kullanışlı, modern bir tasarıma sahip odalarda iki kişilik bir adet yatak bulunmaktadır.",
                            NumberOfBed = 1,
                            NumberOfPeople = 2,
                            Price = 1050m,
                            RoomTypeName = "Double Superior Room",
                            Status = 0
                        },
                        new
                        {
                            ID = 4,
                            Description = "25 - 30 m² Triple Room’da ihtiyaç duyabileceğiniz her şey sizin için düşünülmüştür. Park, şehir ve dağ manzaralı odalar iş ve tatil seyahatleriniz için ideal bir seçenek. Kullanışlı, modern bir tasarıma sahip odalarda üç adet tek kişilik yatak bulunmaktadır.",
                            NumberOfBed = 3,
                            NumberOfPeople = 3,
                            Price = 1500m,
                            RoomTypeName = "Triple Room",
                            Status = 0
                        },
                        new
                        {
                            ID = 5,
                            Description = "25 - 30 m² Triple Room’da ihtiyaç duyabileceğiniz her şey sizin için düşünülmüştür. Park, şehir ve dağ manzaralı odalar iş ve tatil seyahatleriniz için ideal bir seçenek. Kullanışlı, modern bir tasarıma sahip odalarda bir adet tek kişilik, bir adet iki kişilik yatak bulunmaktadır.",
                            NumberOfBed = 2,
                            NumberOfPeople = 3,
                            Price = 1500m,
                            RoomTypeName = "Triple Superior Room",
                            Status = 0
                        },
                        new
                        {
                            ID = 6,
                            Description = "30 - 35 m² Family Room’da ihtiyaç duyabileceğiniz her şey sizin için düşünülmüştür. Park, şehir ve dağ manzaralı odalar iş ve tatil seyahatleriniz için ideal bir seçenek. Kullanışlı, modern bir tasarıma sahip odalarda bir adet çift kişilik, iki adet tek kişilik yatak bulunmaktadır.",
                            NumberOfBed = 3,
                            NumberOfPeople = 4,
                            Price = 1900m,
                            RoomTypeName = "Family Room",
                            Status = 0
                        },
                        new
                        {
                            ID = 7,
                            Description = "Yatak odası, yemek yeme alanına sahip oturma salonu ve iki ayrı banyosuyla 85 m² olan geniş kullanım alanı, şehir ve dağ manzarası ile konforu sunuyor.Rahatlamak ve keyif almak için özel olarak tasarlanan jakuzili banyoda ruhunuzu ve bedeninizi dinlendirebilir, gününüzü keyifle noktalayabilirsiniz.",
                            NumberOfBed = 1,
                            NumberOfPeople = 2,
                            Price = 2500m,
                            RoomTypeName = "Presidential Suite",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Salary", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("BeenPaid")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Month")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("MonthlySalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("Salaries");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            BeenPaid = true,
                            EmployeeID = 1,
                            Month = "Şubat",
                            MonthlySalary = 5000m,
                            PaymentDate = new DateTime(2022, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            ID = 2,
                            BeenPaid = true,
                            EmployeeID = 2,
                            Month = "Şubat",
                            MonthlySalary = 5500m,
                            PaymentDate = new DateTime(2022, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            ID = 3,
                            BeenPaid = false,
                            EmployeeID = 1,
                            Month = "Mart",
                            MonthlySalary = 5000m,
                            Status = 0
                        },
                        new
                        {
                            ID = 4,
                            BeenPaid = false,
                            EmployeeID = 2,
                            Month = "Mart",
                            MonthlySalary = 5500m,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Entities.Concrete.ServicePack", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PackName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("PackPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ID");

                    b.ToTable("ServicePacks");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = "Bu pakette sabah kahvaltısı, öğle yemeği ve akşam yemekleri konaklama ücretine dahildir.",
                            PackName = "Tam Pansiyon",
                            PackPrice = 200m,
                            Status = 0
                        },
                        new
                        {
                            ID = 2,
                            Description = "Bu pakette konaklama süresince 3 öğün yemekler, 5 çayı ve atıştırmalıklarla gün boyunca içecekler (alkolsüz içeceklerle - yerli alkollü içecekler) konaklama ücretine dahildir. Otellerdeki aktiviteler bu konseptte dahil değildir.",
                            PackName = "Her Şey Dahil",
                            PackPrice = 500m,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Setting", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AboutusID")
                        .HasColumnType("int");

                    b.Property<int>("ContactID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("HomePageID")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SmtpEmail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SmtpHost")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SmtpPassword")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SmtpPort")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ID");

                    b.HasIndex("AboutusID");

                    b.HasIndex("ContactID");

                    b.HasIndex("HomePageID");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AboutusID = 1,
                            ContactID = 1,
                            HomePageID = 1,
                            SmtpEmail = "the.mstfa@gmail.com",
                            SmtpHost = "smtp.gmail.com",
                            SmtpPassword = "Mustafa.2525774",
                            SmtpPort = 587,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Shift", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShiftName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ID");

                    b.ToTable("Shifts");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            ShiftName = "Gündüz",
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Status = 0
                        },
                        new
                        {
                            ID = 2,
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            ShiftName = "Akşam",
                            StartTime = new TimeSpan(0, 16, 0, 0, 0),
                            Status = 0
                        },
                        new
                        {
                            ID = 3,
                            EndTime = new TimeSpan(0, 8, 0, 0, 0),
                            ShiftName = "Gece",
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = 0
                        });
                });

            modelBuilder.Entity("Entities.Concrete.StatusOfRoom", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoomID")
                        .HasColumnType("int");

                    b.Property<int>("RoomStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("StatusEndDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("StatusStartDate")
                        .HasColumnType("date");

                    b.HasKey("ID");

                    b.HasIndex("RoomID");

                    b.ToTable("StatusesOfRooms");
                });

            modelBuilder.Entity("Entities.Concrete.UseOfExtraService", b =>
                {
                    b.Property<int>("ExtraServiceID")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ExtraServiceID", "RegistrationID");

                    b.HasIndex("RegistrationID");

                    b.ToTable("UseOfExtraServices");
                });

            modelBuilder.Entity("Entities.Concrete.WebReservation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppUserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("date");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("DiscountedPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NumberOfPeople")
                        .HasColumnType("int");

                    b.Property<bool>("Payment")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ReservationStatus")
                        .HasColumnType("int");

                    b.Property<int>("ReservationType")
                        .HasColumnType("int");

                    b.Property<int>("RoomID")
                        .HasColumnType("int");

                    b.Property<int?>("RoomTypeID")
                        .HasColumnType("int");

                    b.Property<int>("ServicePackID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ID");

                    b.HasIndex("AppUserID");

                    b.HasIndex("RoomID");

                    b.HasIndex("RoomTypeID");

                    b.HasIndex("ServicePackID");

                    b.ToTable("WebReservations");
                });

            modelBuilder.Entity("Entities.Concrete.WorkSchedule", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<bool>("HaveOverTime")
                        .HasColumnType("bit");

                    b.Property<int?>("Holiday")
                        .HasColumnType("int");

                    b.Property<bool>("IsHoliday")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<TimeSpan?>("OverTimeHour")
                        .HasColumnType("time");

                    b.Property<int>("ShiftID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<TimeSpan>("TimesWorked")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("TotalWorkTime")
                        .HasColumnType("time");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ShiftID");

                    b.ToTable("WorkSchedules");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Date = new DateTime(2022, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeID = 1,
                            HaveOverTime = false,
                            Holiday = 2,
                            IsHoliday = true,
                            ShiftID = 1,
                            Status = 0,
                            TimesWorked = new TimeSpan(0, 8, 0, 0, 0),
                            TotalWorkTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            ID = 2,
                            Date = new DateTime(2022, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeID = 2,
                            HaveOverTime = false,
                            IsHoliday = false,
                            ShiftID = 1,
                            Status = 0,
                            TimesWorked = new TimeSpan(0, 8, 0, 0, 0),
                            TotalWorkTime = new TimeSpan(0, 8, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "c62f42df-2d75-4102-b281-a8637f2cb0a1",
                            ConcurrencyStamp = "e8ca41b4-e545-4527-af7f-2c590f1db437",
                            Name = "user",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "bcf7061b-0a59-426a-9b49-f520e1b4849b",
                            ConcurrencyStamp = "a5397f79-6cac-4ddc-b9ad-dad5c387c841",
                            Name = "admin",
                            NormalizedName = "ADMİN"
                        },
                        new
                        {
                            Id = "3920b0ec-725e-4b34-ab67-27c7f816936d",
                            ConcurrencyStamp = "d741d9f1-0749-445f-80d9-c94af12ae9e7",
                            Name = "resepsiyon",
                            NormalizedName = "RESEPSİYON"
                        },
                        new
                        {
                            Id = "75d8b242-e230-4fe8-ad20-b8e818d97957",
                            ConcurrencyStamp = "d17a3dfe-c266-4d30-9b20-3840a16c2ff0",
                            Name = "insankaynaklari",
                            NormalizedName = "İNSANKAYNAKLARİ"
                        },
                        new
                        {
                            Id = "3a2aebe3-6100-4ece-b2be-8bfec2e2c329",
                            ConcurrencyStamp = "85cb250b-1805-4337-a74b-5217cbcc52ca",
                            Name = "yardimcihizmetler",
                            NormalizedName = "YARDİMCİHİZMETLER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Entities.Concrete.Employee", b =>
                {
                    b.HasOne("Entities.Concrete.AppUser", "AppUser")
                        .WithMany("Employees")
                        .HasForeignKey("AppUserId");

                    b.HasOne("Entities.Concrete.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Entities.Concrete.EmployeeShift", b =>
                {
                    b.HasOne("Entities.Concrete.Employee", "Employee")
                        .WithMany("EmployeesShifts")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Shift", "Shift")
                        .WithMany("EmployeesShifts")
                        .HasForeignKey("ShiftID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("Entities.Concrete.FacilityOfRoom", b =>
                {
                    b.HasOne("Entities.Concrete.RoomFacility", "RoomFacility")
                        .WithMany("FacilityOfRooms")
                        .HasForeignKey("RoomFacilityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.RoomType", "RoomType")
                        .WithMany("FacilityOfRooms")
                        .HasForeignKey("RoomTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomFacility");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("Entities.Concrete.GuestRegistration", b =>
                {
                    b.HasOne("Entities.Concrete.Guest", "Guest")
                        .WithMany("GuestRegistrations")
                        .HasForeignKey("GuestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Registration", "Registration")
                        .WithMany("GuestRegistrations")
                        .HasForeignKey("RegistrationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("Entities.Concrete.HomePageSlide", b =>
                {
                    b.HasOne("Entities.Concrete.HomePage", "HomePage")
                        .WithMany("HomePageSlides")
                        .HasForeignKey("HomePageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HomePage");
                });

            modelBuilder.Entity("Entities.Concrete.HotelService", b =>
                {
                    b.HasOne("Entities.Concrete.Setting", "Setting")
                        .WithMany("HotelServices")
                        .HasForeignKey("SettingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Setting");
                });

            modelBuilder.Entity("Entities.Concrete.Income", b =>
                {
                    b.HasOne("Entities.Concrete.Registration", "Registration")
                        .WithMany()
                        .HasForeignKey("RegistrationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("Entities.Concrete.Message", b =>
                {
                    b.HasOne("Entities.Concrete.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserID");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Entities.Concrete.Picture", b =>
                {
                    b.HasOne("Entities.Concrete.Aboutus", "Aboutus")
                        .WithMany("Pictures")
                        .HasForeignKey("AboutusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aboutus");
                });

            modelBuilder.Entity("Entities.Concrete.ReceptionReservation", b =>
                {
                    b.HasOne("Entities.Concrete.Room", "Room")
                        .WithMany("ReceptionReservations")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.RoomType", "RoomType")
                        .WithMany("ReceptionReservations")
                        .HasForeignKey("RoomTypeID");

                    b.HasOne("Entities.Concrete.ServicePack", "ServicePack")
                        .WithMany("ReceptionReservations")
                        .HasForeignKey("ServicePackID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("RoomType");

                    b.Navigation("ServicePack");
                });

            modelBuilder.Entity("Entities.Concrete.Registration", b =>
                {
                    b.HasOne("Entities.Concrete.Room", "Room")
                        .WithMany("Registirations")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.ServicePack", "ServicePack")
                        .WithMany("Registirations")
                        .HasForeignKey("ServicePackID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("ServicePack");
                });

            modelBuilder.Entity("Entities.Concrete.Room", b =>
                {
                    b.HasOne("Entities.Concrete.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("Entities.Concrete.RoomPicture", b =>
                {
                    b.HasOne("Entities.Concrete.RoomType", "RoomType")
                        .WithMany("RoomPictures")
                        .HasForeignKey("RoomTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("Entities.Concrete.Salary", b =>
                {
                    b.HasOne("Entities.Concrete.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Entities.Concrete.Setting", b =>
                {
                    b.HasOne("Entities.Concrete.Aboutus", "Aboutus")
                        .WithMany("Settings")
                        .HasForeignKey("AboutusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Contact", "Contact")
                        .WithMany("Settings")
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.HomePage", "HomePage")
                        .WithMany("Settings")
                        .HasForeignKey("HomePageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aboutus");

                    b.Navigation("Contact");

                    b.Navigation("HomePage");
                });

            modelBuilder.Entity("Entities.Concrete.StatusOfRoom", b =>
                {
                    b.HasOne("Entities.Concrete.Room", "Room")
                        .WithMany("StatusOfRooms")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Entities.Concrete.UseOfExtraService", b =>
                {
                    b.HasOne("Entities.Concrete.ExtraService", "ExtraService")
                        .WithMany("UseOfExtraServices")
                        .HasForeignKey("ExtraServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Registration", "Registiration")
                        .WithMany("UseOfExtraServices")
                        .HasForeignKey("RegistrationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExtraService");

                    b.Navigation("Registiration");
                });

            modelBuilder.Entity("Entities.Concrete.WebReservation", b =>
                {
                    b.HasOne("Entities.Concrete.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Room", "Room")
                        .WithMany("WebReservations")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.RoomType", "RoomType")
                        .WithMany("WebReservations")
                        .HasForeignKey("RoomTypeID");

                    b.HasOne("Entities.Concrete.ServicePack", "ServicePack")
                        .WithMany("WebReservations")
                        .HasForeignKey("ServicePackID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Room");

                    b.Navigation("RoomType");

                    b.Navigation("ServicePack");
                });

            modelBuilder.Entity("Entities.Concrete.WorkSchedule", b =>
                {
                    b.HasOne("Entities.Concrete.Employee", "Employee")
                        .WithMany("WorkSchedules")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Shift", "Shift")
                        .WithMany("WorkSchedules")
                        .HasForeignKey("ShiftID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Concrete.Aboutus", b =>
                {
                    b.Navigation("Pictures");

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("Entities.Concrete.AppUser", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Entities.Concrete.Contact", b =>
                {
                    b.Navigation("Settings");
                });

            modelBuilder.Entity("Entities.Concrete.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Entities.Concrete.Employee", b =>
                {
                    b.Navigation("EmployeesShifts");

                    b.Navigation("WorkSchedules");
                });

            modelBuilder.Entity("Entities.Concrete.ExtraService", b =>
                {
                    b.Navigation("UseOfExtraServices");
                });

            modelBuilder.Entity("Entities.Concrete.Guest", b =>
                {
                    b.Navigation("GuestRegistrations");
                });

            modelBuilder.Entity("Entities.Concrete.HomePage", b =>
                {
                    b.Navigation("HomePageSlides");

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("Entities.Concrete.Registration", b =>
                {
                    b.Navigation("GuestRegistrations");

                    b.Navigation("UseOfExtraServices");
                });

            modelBuilder.Entity("Entities.Concrete.Room", b =>
                {
                    b.Navigation("ReceptionReservations");

                    b.Navigation("Registirations");

                    b.Navigation("StatusOfRooms");

                    b.Navigation("WebReservations");
                });

            modelBuilder.Entity("Entities.Concrete.RoomFacility", b =>
                {
                    b.Navigation("FacilityOfRooms");
                });

            modelBuilder.Entity("Entities.Concrete.RoomType", b =>
                {
                    b.Navigation("FacilityOfRooms");

                    b.Navigation("ReceptionReservations");

                    b.Navigation("RoomPictures");

                    b.Navigation("Rooms");

                    b.Navigation("WebReservations");
                });

            modelBuilder.Entity("Entities.Concrete.ServicePack", b =>
                {
                    b.Navigation("ReceptionReservations");

                    b.Navigation("Registirations");

                    b.Navigation("WebReservations");
                });

            modelBuilder.Entity("Entities.Concrete.Setting", b =>
                {
                    b.Navigation("HotelServices");
                });

            modelBuilder.Entity("Entities.Concrete.Shift", b =>
                {
                    b.Navigation("EmployeesShifts");

                    b.Navigation("WorkSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
