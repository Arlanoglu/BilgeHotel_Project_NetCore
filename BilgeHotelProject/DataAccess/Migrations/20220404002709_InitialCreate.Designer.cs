// <auto-generated />
using System;
using DataAccess.Concrete.EntityFramework.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220404002709_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Concrete.Aboutus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Paragraph1")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Paragraph2")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Paragraph3")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Paragraph4")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Paragraph5")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PictureUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Aboutus");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Paragraph1 = "Kemer’in tarihi ve kültürel merkezlerinin kesişim noktasında yer alan, şehrin ilk 5 yıldızlı konaklama tesisi unvanına sahip Bilge Hotel, 35 yıllık deneyimi ile alanının en iyisi olmaya devam ediyor.",
                            Paragraph2 = "Bilge Hotel, Osmanlı sarayları ve Fransız mimarisinden esinlenilerek özenle tasarlanmış yeni konsepti kapsamında; birbirinden farklı şekilde dekore edilmiş lüks oda ve süitleri, Türk ve dünya mutfağının seçkin lezzetlerini servis eden restoranları, A’dan Z’ye yenilenmiş SPA tesisiyle misafirlerine en konforlu konaklama deneyimini sunuyor.",
                            Paragraph3 = "Bilge Hotel iş toplantıları, kutlamalar ve farklı özel etkinlikler için 1000 kişilik kapasiteye ve eksiksiz teknik donanıma sahip salonlarıyla bir şehir otelinin ötesine geçerek kişiye özel lüks hizmetler sunuyor.",
                            Paragraph4 = "Kemer şehir merkezinde yer alan Bilge Otel, alışveriş merkezlerine, Atatürk Kongre ve Kültür Merkezi’ne ve toplu taşıma duraklarına yürüyüş mesafesindedir.",
                            Paragraph5 = "Bilge Hotel Güvenli Turizm Sertifikası, ISO 22000 Gıda Güvenliği Yönetim Sistemi Belgesi, Sıfır Atık Belgesi ve Turuncu Bayrak sahibidir.",
                            PictureUrl = "/img/aboutus-img.jpg",
                            Status = 0,
                            Title = "Bilge Hotel, Kalite ve Konforun Adresi"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("ActivationKey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Entities.Concrete.Contact", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Facebook")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Fax")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Instagram")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone1")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Phone2")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Twitter")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ID");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Adress = "03768 Beahan Junctions, South Mallieport, Papua New Guinea",
                            Email = "Barbara_Mraz64@hotmail.com",
                            Facebook = "https://www.facebook.com/bilgehotel",
                            Fax = "05454526235",
                            Instagram = "https://www.instagram.com/bilgehotel",
                            Phone1 = "05454526235",
                            Status = 0,
                            Twitter = "https://www.twitter.com/bilgehotel"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Department", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ID");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DepartmentName = "Yardımcı Hizmetler",
                            Status = 0
                        },
                        new
                        {
                            ID = 2,
                            DepartmentName = "Bilgi İşlem",
                            Status = 0
                        },
                        new
                        {
                            ID = 3,
                            DepartmentName = "Mutfak",
                            Status = 0
                        },
                        new
                        {
                            ID = 4,
                            DepartmentName = "Resepsiyon",
                            Status = 0
                        },
                        new
                        {
                            ID = 5,
                            DepartmentName = "Yönetim",
                            Status = 0
                        },
                        new
                        {
                            ID = 6,
                            DepartmentName = "İnsan Kaynakları",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Employee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EmployeeStatus")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("IdentificationNumber")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("LeavingWorkDate")
                        .HasColumnType("date");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("MonthlySalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OvertimePay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ReasonForLeaving")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ShiftID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDateOfWork")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AppUserId");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("ShiftID");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DepartmentID = 4,
                            Email = "Brandon_Boyer92@gmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Brandon",
                            HourlyRate = 198.263550786424220m,
                            IdentificationNumber = "5177",
                            IsActive = true,
                            LastName = "Boyer",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2020, 3, 15, 21, 18, 47, 169, DateTimeKind.Unspecified).AddTicks(3218),
                            Status = 0,
                            Title = "Resepsiyonist"
                        },
                        new
                        {
                            ID = 2,
                            DepartmentID = 4,
                            Email = "Herbert.Barton52@hotmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Herbert",
                            HourlyRate = 193.91792690563850m,
                            IdentificationNumber = "6559",
                            IsActive = true,
                            LastName = "Barton",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2020, 2, 4, 23, 17, 43, 824, DateTimeKind.Unspecified).AddTicks(8050),
                            Status = 0,
                            Title = "Resepsiyonist"
                        },
                        new
                        {
                            ID = 3,
                            DepartmentID = 4,
                            Email = "Kristen.Konopelski@gmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Kristen",
                            HourlyRate = 190.3901778023644250m,
                            IdentificationNumber = "8932",
                            IsActive = true,
                            LastName = "Konopelski",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2020, 7, 18, 9, 28, 3, 732, DateTimeKind.Unspecified).AddTicks(9154),
                            Status = 0,
                            Title = "Resepsiyonist"
                        },
                        new
                        {
                            ID = 4,
                            DepartmentID = 4,
                            Email = "Tony_Mayert@yahoo.com",
                            EmployeeStatus = 3,
                            FirstName = "Tony",
                            HourlyRate = 190.2270805324553890m,
                            IdentificationNumber = "5294",
                            IsActive = true,
                            LastName = "Mayert",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2022, 1, 13, 10, 43, 19, 336, DateTimeKind.Unspecified).AddTicks(6835),
                            Status = 0,
                            Title = "Resepsiyonist"
                        },
                        new
                        {
                            ID = 5,
                            DepartmentID = 4,
                            Email = "Angelina47@gmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Angelina",
                            HourlyRate = 198.168171205636190m,
                            IdentificationNumber = "6032",
                            IsActive = true,
                            LastName = "Morissette",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2020, 2, 25, 12, 16, 6, 971, DateTimeKind.Unspecified).AddTicks(5128),
                            Status = 0,
                            Title = "Resepsiyonist"
                        },
                        new
                        {
                            ID = 6,
                            DepartmentID = 4,
                            Email = "Marilyn_Wilkinson@hotmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Marilyn",
                            HourlyRate = 197.834990591665260m,
                            IdentificationNumber = "8378",
                            IsActive = true,
                            LastName = "Wilkinson",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2021, 12, 17, 22, 29, 47, 42, DateTimeKind.Unspecified).AddTicks(9403),
                            Status = 0,
                            Title = "Resepsiyonist"
                        },
                        new
                        {
                            ID = 7,
                            DepartmentID = 4,
                            Email = "Carroll59@gmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Carroll",
                            HourlyRate = 194.024574660707530m,
                            IdentificationNumber = "1521",
                            IsActive = true,
                            LastName = "Cormier",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2019, 8, 4, 21, 37, 33, 939, DateTimeKind.Unspecified).AddTicks(2697),
                            Status = 0,
                            Title = "Resepsiyonist"
                        },
                        new
                        {
                            ID = 8,
                            DepartmentID = 1,
                            Email = "Debbie.Ziemann@yahoo.com",
                            EmployeeStatus = 3,
                            FirstName = "Debbie",
                            HourlyRate = 197.392319290615770m,
                            IdentificationNumber = "2313",
                            IsActive = true,
                            LastName = "Ziemann",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2021, 6, 4, 19, 58, 5, 809, DateTimeKind.Unspecified).AddTicks(9060),
                            Status = 0,
                            Title = "Temizlik Görevlisi"
                        },
                        new
                        {
                            ID = 9,
                            DepartmentID = 1,
                            Email = "John27@gmail.com",
                            EmployeeStatus = 3,
                            FirstName = "John",
                            HourlyRate = 197.367167601998510m,
                            IdentificationNumber = "3008",
                            IsActive = true,
                            LastName = "Graham",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2020, 3, 15, 16, 1, 1, 795, DateTimeKind.Unspecified).AddTicks(295),
                            Status = 0,
                            Title = "Temizlik Görevlisi"
                        },
                        new
                        {
                            ID = 10,
                            DepartmentID = 1,
                            Email = "Dominic.OKon11@gmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Dominic",
                            HourlyRate = 192.020620117904910m,
                            IdentificationNumber = "9531",
                            IsActive = true,
                            LastName = "O'Kon",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2021, 12, 30, 10, 30, 25, 935, DateTimeKind.Unspecified).AddTicks(4941),
                            Status = 0,
                            Title = "Temizlik Görevlisi"
                        },
                        new
                        {
                            ID = 11,
                            DepartmentID = 1,
                            Email = "Joann.Brekke@yahoo.com",
                            EmployeeStatus = 3,
                            FirstName = "Joann",
                            HourlyRate = 195.112676324840950m,
                            IdentificationNumber = "6367",
                            IsActive = true,
                            LastName = "Brekke",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2019, 3, 21, 19, 19, 24, 223, DateTimeKind.Unspecified).AddTicks(4585),
                            Status = 0,
                            Title = "Temizlik Görevlisi"
                        },
                        new
                        {
                            ID = 12,
                            DepartmentID = 1,
                            Email = "Irvin87@gmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Irvin",
                            HourlyRate = 192.637281069828790m,
                            IdentificationNumber = "2013",
                            IsActive = true,
                            LastName = "Murphy",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2021, 2, 25, 9, 56, 28, 795, DateTimeKind.Unspecified).AddTicks(8348),
                            Status = 0,
                            Title = "Temizlik Görevlisi"
                        },
                        new
                        {
                            ID = 13,
                            DepartmentID = 1,
                            Email = "Kelly_Ernser@gmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Kelly",
                            HourlyRate = 195.558800229597280m,
                            IdentificationNumber = "6825",
                            IsActive = true,
                            LastName = "Ernser",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2020, 9, 5, 21, 38, 40, 183, DateTimeKind.Unspecified).AddTicks(786),
                            Status = 0,
                            Title = "Temizlik Görevlisi"
                        },
                        new
                        {
                            ID = 14,
                            DepartmentID = 1,
                            Email = "Carlos69@hotmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Carlos",
                            HourlyRate = 195.411163310246150m,
                            IdentificationNumber = "9735",
                            IsActive = true,
                            LastName = "Crona",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2021, 11, 13, 15, 35, 7, 30, DateTimeKind.Unspecified).AddTicks(2250),
                            Status = 0,
                            Title = "Temizlik Görevlisi"
                        },
                        new
                        {
                            ID = 15,
                            DepartmentID = 1,
                            Email = "Jake30@gmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Jake",
                            HourlyRate = 194.102654966573540m,
                            IdentificationNumber = "2867",
                            IsActive = true,
                            LastName = "Steuber",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2021, 12, 22, 20, 5, 20, 262, DateTimeKind.Unspecified).AddTicks(1169),
                            Status = 0,
                            Title = "Temizlik Görevlisi"
                        },
                        new
                        {
                            ID = 16,
                            DepartmentID = 1,
                            Email = "Geneva.Johnston@hotmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Geneva",
                            HourlyRate = 199.804825032970320m,
                            IdentificationNumber = "8267",
                            IsActive = true,
                            LastName = "Johnston",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2020, 6, 19, 11, 46, 14, 794, DateTimeKind.Unspecified).AddTicks(4318),
                            Status = 0,
                            Title = "Temizlik Görevlisi"
                        },
                        new
                        {
                            ID = 17,
                            DepartmentID = 1,
                            Email = "Roosevelt_Roberts66@gmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Roosevelt",
                            HourlyRate = 193.108077479111070m,
                            IdentificationNumber = "5923",
                            IsActive = true,
                            LastName = "Roberts",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2019, 12, 8, 9, 19, 26, 461, DateTimeKind.Unspecified).AddTicks(1494),
                            Status = 0,
                            Title = "Temizlik Görevlisi"
                        },
                        new
                        {
                            ID = 18,
                            DepartmentID = 1,
                            Email = "Orville.Block94@yahoo.com",
                            EmployeeStatus = 3,
                            FirstName = "Orville",
                            HourlyRate = 191.218884820686130m,
                            IdentificationNumber = "6629",
                            IsActive = true,
                            LastName = "Block",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2019, 1, 8, 22, 49, 56, 465, DateTimeKind.Unspecified).AddTicks(4402),
                            Status = 0,
                            Title = "Temizlik Görevlisi"
                        },
                        new
                        {
                            ID = 19,
                            DepartmentID = 3,
                            Email = "Devin_Nolan@hotmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Devin",
                            HourlyRate = 194.96795476179940m,
                            IdentificationNumber = "7937",
                            IsActive = true,
                            LastName = "Nolan",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2019, 1, 7, 18, 19, 17, 139, DateTimeKind.Unspecified).AddTicks(1940),
                            Status = 0,
                            Title = "Aşçı"
                        },
                        new
                        {
                            ID = 20,
                            DepartmentID = 3,
                            Email = "Jeff.Cormier@hotmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Jeff",
                            HourlyRate = 198.770130392522610m,
                            IdentificationNumber = "7192",
                            IsActive = true,
                            LastName = "Cormier",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2021, 8, 15, 17, 12, 40, 832, DateTimeKind.Unspecified).AddTicks(2745),
                            Status = 0,
                            Title = "Aşçı"
                        },
                        new
                        {
                            ID = 21,
                            DepartmentID = 3,
                            Email = "Ruben.Conroy34@gmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Ruben",
                            HourlyRate = 197.040949192382840m,
                            IdentificationNumber = "4818",
                            IsActive = true,
                            LastName = "Conroy",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2019, 10, 27, 2, 11, 23, 294, DateTimeKind.Unspecified).AddTicks(8962),
                            Status = 0,
                            Title = "Aşçı"
                        },
                        new
                        {
                            ID = 22,
                            DepartmentID = 3,
                            Email = "Jasmine.Collins@gmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Jasmine",
                            HourlyRate = 192.840733063798740m,
                            IdentificationNumber = "8592",
                            IsActive = true,
                            LastName = "Collins",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2019, 5, 17, 10, 3, 42, 560, DateTimeKind.Unspecified).AddTicks(367),
                            Status = 0,
                            Title = "Aşçı"
                        },
                        new
                        {
                            ID = 23,
                            DepartmentID = 3,
                            Email = "Michael_Becker62@gmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Michael",
                            HourlyRate = 191.599780335836010m,
                            IdentificationNumber = "1841",
                            IsActive = true,
                            LastName = "Becker",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2019, 6, 27, 4, 7, 11, 885, DateTimeKind.Unspecified).AddTicks(6789),
                            Status = 0,
                            Title = "Aşçı"
                        },
                        new
                        {
                            ID = 24,
                            DepartmentID = 3,
                            Email = "Maurice.Glover22@yahoo.com",
                            EmployeeStatus = 3,
                            FirstName = "Maurice",
                            HourlyRate = 190.2285158914646670m,
                            IdentificationNumber = "6270",
                            IsActive = true,
                            LastName = "Glover",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2021, 6, 8, 19, 37, 45, 766, DateTimeKind.Unspecified).AddTicks(6682),
                            Status = 0,
                            Title = "Aşçı"
                        },
                        new
                        {
                            ID = 25,
                            DepartmentID = 3,
                            Email = "Lynda.Keebler@gmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Lynda",
                            HourlyRate = 193.724934106564580m,
                            IdentificationNumber = "2499",
                            IsActive = true,
                            LastName = "Keebler",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2020, 10, 31, 6, 14, 51, 691, DateTimeKind.Unspecified).AddTicks(3065),
                            Status = 0,
                            Title = "Aşçı"
                        },
                        new
                        {
                            ID = 26,
                            DepartmentID = 3,
                            Email = "Elizabeth_Schmidt@gmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Elizabeth",
                            HourlyRate = 190.3084167234173120m,
                            IdentificationNumber = "4133",
                            IsActive = true,
                            LastName = "Schmidt",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2020, 6, 10, 12, 15, 32, 48, DateTimeKind.Unspecified).AddTicks(1096),
                            Status = 0,
                            Title = "Aşçı"
                        },
                        new
                        {
                            ID = 27,
                            DepartmentID = 3,
                            Email = "Kelly.Auer79@yahoo.com",
                            EmployeeStatus = 3,
                            FirstName = "Kelly",
                            HourlyRate = 190.6597136616053590m,
                            IdentificationNumber = "1341",
                            IsActive = true,
                            LastName = "Auer",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2019, 6, 6, 5, 24, 57, 820, DateTimeKind.Unspecified).AddTicks(8491),
                            Status = 0,
                            Title = "Aşçı"
                        },
                        new
                        {
                            ID = 28,
                            DepartmentID = 3,
                            Email = "Louise_Dietrich@yahoo.com",
                            EmployeeStatus = 3,
                            FirstName = "Louise",
                            HourlyRate = 198.932409430356890m,
                            IdentificationNumber = "7149",
                            IsActive = true,
                            LastName = "Dietrich",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2022, 4, 1, 7, 37, 4, 45, DateTimeKind.Unspecified).AddTicks(617),
                            Status = 0,
                            Title = "Aşçı"
                        },
                        new
                        {
                            ID = 29,
                            DepartmentID = 3,
                            Email = "Rodney_Jast36@hotmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Rodney",
                            HourlyRate = 197.204422129878970m,
                            IdentificationNumber = "2674",
                            IsActive = true,
                            LastName = "Jast",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2020, 2, 27, 19, 54, 27, 339, DateTimeKind.Unspecified).AddTicks(9821),
                            Status = 0,
                            Title = "Aşçı"
                        },
                        new
                        {
                            ID = 30,
                            DepartmentID = 3,
                            Email = "Timmy.OHara@gmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Timmy",
                            HourlyRate = 191.875381200516310m,
                            IdentificationNumber = "4599",
                            IsActive = true,
                            LastName = "O'Hara",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2021, 9, 13, 10, 46, 5, 36, DateTimeKind.Unspecified).AddTicks(5023),
                            Status = 0,
                            Title = "Garson"
                        },
                        new
                        {
                            ID = 31,
                            DepartmentID = 3,
                            Email = "Eddie.Bernier@hotmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Eddie",
                            HourlyRate = 195.82278720840010m,
                            IdentificationNumber = "8981",
                            IsActive = true,
                            LastName = "Bernier",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2019, 2, 12, 5, 57, 24, 998, DateTimeKind.Unspecified).AddTicks(2803),
                            Status = 0,
                            Title = "Garson"
                        },
                        new
                        {
                            ID = 32,
                            DepartmentID = 3,
                            Email = "Claire.Lockman@gmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Claire",
                            HourlyRate = 197.247894856728560m,
                            IdentificationNumber = "8238",
                            IsActive = true,
                            LastName = "Lockman",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2019, 1, 7, 12, 1, 8, 34, DateTimeKind.Unspecified).AddTicks(2060),
                            Status = 0,
                            Title = "Garson"
                        },
                        new
                        {
                            ID = 33,
                            DepartmentID = 3,
                            Email = "Emmett_Klocko@gmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Emmett",
                            HourlyRate = 196.809085359242320m,
                            IdentificationNumber = "7898",
                            IsActive = true,
                            LastName = "Klocko",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2021, 6, 7, 12, 9, 1, 823, DateTimeKind.Unspecified).AddTicks(2543),
                            Status = 0,
                            Title = "Garson"
                        },
                        new
                        {
                            ID = 34,
                            DepartmentID = 3,
                            Email = "Taylor.Schoen75@gmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Taylor",
                            HourlyRate = 199.906786018939120m,
                            IdentificationNumber = "6346",
                            IsActive = true,
                            LastName = "Schoen",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2021, 2, 9, 1, 37, 29, 501, DateTimeKind.Unspecified).AddTicks(7288),
                            Status = 0,
                            Title = "Garson"
                        },
                        new
                        {
                            ID = 35,
                            DepartmentID = 3,
                            Email = "Amber.Jacobson@yahoo.com",
                            EmployeeStatus = 3,
                            FirstName = "Amber",
                            HourlyRate = 196.210630329423880m,
                            IdentificationNumber = "6278",
                            IsActive = true,
                            LastName = "Jacobson",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2021, 10, 25, 21, 2, 29, 684, DateTimeKind.Unspecified).AddTicks(2318),
                            Status = 0,
                            Title = "Garson"
                        },
                        new
                        {
                            ID = 36,
                            DepartmentID = 3,
                            Email = "Robin69@yahoo.com",
                            EmployeeStatus = 3,
                            FirstName = "Robin",
                            HourlyRate = 192.758066408689160m,
                            IdentificationNumber = "7276",
                            IsActive = true,
                            LastName = "Paucek",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2021, 1, 3, 2, 58, 27, 244, DateTimeKind.Unspecified).AddTicks(213),
                            Status = 0,
                            Title = "Garson"
                        },
                        new
                        {
                            ID = 37,
                            DepartmentID = 3,
                            Email = "Tanya91@gmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Tanya",
                            HourlyRate = 192.442356754300350m,
                            IdentificationNumber = "3108",
                            IsActive = true,
                            LastName = "Koch",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2020, 7, 13, 18, 33, 59, 896, DateTimeKind.Unspecified).AddTicks(392),
                            Status = 0,
                            Title = "Garson"
                        },
                        new
                        {
                            ID = 38,
                            DepartmentID = 3,
                            Email = "Kenny_Abshire54@hotmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Kenny",
                            HourlyRate = 196.832108072392690m,
                            IdentificationNumber = "7276",
                            IsActive = true,
                            LastName = "Abshire",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2021, 1, 3, 15, 14, 49, 339, DateTimeKind.Unspecified).AddTicks(6825),
                            Status = 0,
                            Title = "Garson"
                        },
                        new
                        {
                            ID = 39,
                            DepartmentID = 3,
                            Email = "Carroll2@gmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Carroll",
                            HourlyRate = 192.273137118794550m,
                            IdentificationNumber = "2051",
                            IsActive = true,
                            LastName = "Treutel",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2019, 7, 14, 7, 22, 46, 749, DateTimeKind.Unspecified).AddTicks(5796),
                            Status = 0,
                            Title = "Garson"
                        },
                        new
                        {
                            ID = 40,
                            DepartmentID = 3,
                            Email = "Earl_Miller77@hotmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Earl",
                            HourlyRate = 194.160087883546990m,
                            IdentificationNumber = "9662",
                            IsActive = true,
                            LastName = "Miller",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2020, 11, 11, 22, 10, 5, 543, DateTimeKind.Unspecified).AddTicks(428),
                            Status = 0,
                            Title = "Garson"
                        },
                        new
                        {
                            ID = 41,
                            DepartmentID = 3,
                            Email = "Gregg.Zboncak@yahoo.com",
                            EmployeeStatus = 3,
                            FirstName = "Gregg",
                            HourlyRate = 198.767138043775750m,
                            IdentificationNumber = "4049",
                            IsActive = true,
                            LastName = "Zboncak",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2021, 3, 10, 8, 24, 37, 712, DateTimeKind.Unspecified).AddTicks(8995),
                            Status = 0,
                            Title = "Garson"
                        },
                        new
                        {
                            ID = 42,
                            DepartmentID = 3,
                            Email = "Boyd_Lowe56@gmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Boyd",
                            HourlyRate = 196.117197906653020m,
                            IdentificationNumber = "7577",
                            IsActive = true,
                            LastName = "Lowe",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2019, 9, 11, 20, 20, 37, 276, DateTimeKind.Unspecified).AddTicks(9029),
                            Status = 0,
                            Title = "Garson"
                        },
                        new
                        {
                            ID = 43,
                            DepartmentID = 1,
                            Email = "Nelson.Corwin@yahoo.com",
                            EmployeeStatus = 3,
                            FirstName = "Nelson",
                            HourlyRate = 192.295389344121980m,
                            IdentificationNumber = "8051",
                            IsActive = true,
                            LastName = "Corwin",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2019, 7, 6, 19, 12, 22, 750, DateTimeKind.Unspecified).AddTicks(9766),
                            Status = 0,
                            Title = "Elektirikçi"
                        },
                        new
                        {
                            ID = 44,
                            DepartmentID = 2,
                            Email = "Mabel.Reichert@gmail.com",
                            EmployeeStatus = 3,
                            FirstName = "Mabel",
                            HourlyRate = 196.40221373010530m,
                            IdentificationNumber = "2797",
                            IsActive = true,
                            LastName = "Reichert",
                            MonthlySalary = 0m,
                            OvertimePay = 12m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2019, 9, 6, 4, 54, 49, 892, DateTimeKind.Unspecified).AddTicks(2445),
                            Status = 0,
                            Title = "Bilgi İşlem Sorumlusu"
                        },
                        new
                        {
                            ID = 45,
                            DepartmentID = 5,
                            Email = "Paul50@hotmail.com",
                            EmployeeStatus = 0,
                            FirstName = "Paul",
                            HourlyRate = 199.575854381348870m,
                            IdentificationNumber = "3020",
                            IsActive = true,
                            LastName = "Parisian",
                            MonthlySalary = 10000m,
                            OvertimePay = 0m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2019, 3, 17, 9, 37, 3, 229, DateTimeKind.Unspecified).AddTicks(2618),
                            Status = 0,
                            Title = "Müdür"
                        },
                        new
                        {
                            ID = 46,
                            DepartmentID = 6,
                            Email = "Louis13@hotmail.com",
                            EmployeeStatus = 1,
                            FirstName = "Louis",
                            HourlyRate = 194.100576892541990m,
                            IdentificationNumber = "5278",
                            IsActive = true,
                            LastName = "Lehner",
                            MonthlySalary = 10000m,
                            OvertimePay = 0m,
                            PhoneNumber = "05454526235",
                            ShiftID = 1,
                            StartDateOfWork = new DateTime(2020, 1, 3, 3, 19, 4, 135, DateTimeKind.Unspecified).AddTicks(2106),
                            Status = 0,
                            Title = "İnsan Kaynakları Müdürü"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.EmployeeShift", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmployeeID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShiftID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ID");

                    b.ToTable("EmployeesShifts");
                });

            modelBuilder.Entity("Entities.Concrete.ExtraService", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ID");

                    b.ToTable("ExtraServices");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Price = 600m,
                            ServiceName = "Sauna",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Entities.Concrete.FacilityOfRoom", b =>
                {
                    b.Property<int>("RoomFacilityID")
                        .HasColumnType("int");

                    b.Property<int>("RoomTypeID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("RoomFacilityID", "RoomTypeID");

                    b.HasIndex("RoomTypeID");

                    b.ToTable("FacilitiesOfRooms");

                    b.HasData(
                        new
                        {
                            RoomFacilityID = 1,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 2,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 3,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 4,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 1,
                            RoomTypeID = 2,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 2,
                            RoomTypeID = 2,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 3,
                            RoomTypeID = 2,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 4,
                            RoomTypeID = 2,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 5,
                            RoomTypeID = 2,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 1,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 2,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 3,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 4,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 6,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 1,
                            RoomTypeID = 4,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 2,
                            RoomTypeID = 4,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 3,
                            RoomTypeID = 4,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 4,
                            RoomTypeID = 4,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 5,
                            RoomTypeID = 4,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 1,
                            RoomTypeID = 5,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 2,
                            RoomTypeID = 5,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 3,
                            RoomTypeID = 5,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 4,
                            RoomTypeID = 5,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 5,
                            RoomTypeID = 5,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 6,
                            RoomTypeID = 5,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 1,
                            RoomTypeID = 6,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 2,
                            RoomTypeID = 6,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 3,
                            RoomTypeID = 6,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 4,
                            RoomTypeID = 6,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 5,
                            RoomTypeID = 6,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 6,
                            RoomTypeID = 6,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 1,
                            RoomTypeID = 7,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 2,
                            RoomTypeID = 7,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 3,
                            RoomTypeID = 7,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 4,
                            RoomTypeID = 7,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 5,
                            RoomTypeID = 7,
                            Status = 0
                        },
                        new
                        {
                            RoomFacilityID = 6,
                            RoomTypeID = 7,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Guest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IdCardBackSideImage")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("IdCardFrontSideImage")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ID");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("Entities.Concrete.GuestRegistration", b =>
                {
                    b.Property<int>("RegistrationID")
                        .HasColumnType("int");

                    b.Property<int>("GuestID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("RegistrationID", "GuestID");

                    b.HasIndex("GuestID");

                    b.ToTable("GuestRegistration");
                });

            modelBuilder.Entity("Entities.Concrete.HomePage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Paragraph1")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Paragraph2")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Paragraph3")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Paragraph4")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Paragraph5")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Subtitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("HomePages");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Paragraph1 = "Bilge Hotel Thermal Spa & Convention Center; Kemer şehir merkezinde, güler yüzlü ve profesyonel ekibi ile beklentilerin üzerinde hizmet vermektedir.",
                            Paragraph2 = "Bilge Hotel 35 yıllık deneyimi, misafir memnuniyeti odaklı hizmet anlayışı ile sizleri kaliteye ve konfora davet ediyor.",
                            PictureUrl = "/img/homepage-img.jpg",
                            Status = 0,
                            Subtitle = "Bilge Hotel'e Hoşgeldiniz...",
                            Title = "Kalite ve Konfor"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.HomePageSlide", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("HomePageID")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PictureName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ID");

                    b.HasIndex("HomePageID");

                    b.ToTable("HomePageSlides");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            HomePageID = 1,
                            PictureName = "Slide1",
                            PictureUrl = "https://www.almira.com.tr/images/genel1.jpg",
                            Status = 0
                        },
                        new
                        {
                            ID = 2,
                            HomePageID = 1,
                            PictureName = "Slide2",
                            PictureUrl = "https://www.almira.com.tr/images/gallery/almira/04.jpg",
                            Status = 0
                        },
                        new
                        {
                            ID = 3,
                            HomePageID = 1,
                            PictureName = "Slide3",
                            PictureUrl = "https://www.almira.com.tr/images/gallery/almira/07.jpg",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Entities.Concrete.HotelService", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("IconPicture")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SettingID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ID");

                    b.HasIndex("SettingID");

                    b.ToTable("HotelServices");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            IconPicture = "https://roof264.com/media/image/mobil/oda-servisi.jpg",
                            ServiceName = "Oda Servisi",
                            SettingID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 2,
                            IconPicture = "https://roof264.com/media/image/mobil/ucretsiz-wi-fi.jpg",
                            ServiceName = "Ücretsiz Wifi",
                            SettingID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 3,
                            IconPicture = "https://roof264.com/media/image/mobil/camasir-yikama.jpg",
                            ServiceName = "Çamaşır Yıkama",
                            SettingID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 4,
                            IconPicture = "https://roof264.com/media/image/mobil/oda-ici-kasa.jpg",
                            ServiceName = "Kasa",
                            SettingID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 5,
                            IconPicture = "https://roof264.com/media/image/mobil/toplanti-olanaklari-max-10.jpg",
                            ServiceName = "Toplantı Olanakları",
                            SettingID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 6,
                            IconPicture = "https://roof264.com/media/image/mobil/bagaj-depolama.jpg",
                            ServiceName = "Bagaj Depolama",
                            SettingID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 7,
                            IconPicture = "https://roof264.com/media/image/mobil/hizli-c-in-c-out.jpg",
                            ServiceName = "Hızlı C in / C out",
                            SettingID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 8,
                            IconPicture = "https://roof264.com/media/image/mobil/kuru-temizleme.jpg",
                            ServiceName = "Kuru Temizleme",
                            SettingID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 9,
                            IconPicture = "https://roof264.com/media/image/mobil/bebek-karyolasi.jpg",
                            ServiceName = "Bebek Karyolası",
                            SettingID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 10,
                            IconPicture = "https://roof264.com/media/image/mobil/aile-odasi.jpg",
                            ServiceName = "Aile Odası",
                            SettingID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 11,
                            IconPicture = "https://roof264.com/media/image/mobil/sicak-kahvalti.jpg",
                            ServiceName = "Sıcak Kahvaltı",
                            SettingID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 12,
                            IconPicture = "https://roof264.com/media/image/mobil/merkezi-konum.jpg",
                            ServiceName = "Merkezi Konum",
                            SettingID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 13,
                            IconPicture = "https://roof264.com/media/image/mobil/ucretsiz-acik-kapali-otopark.jpg",
                            ServiceName = "Ücretsiz Açık / Kapalı Otopark",
                            SettingID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 14,
                            IconPicture = "https://roof264.com/media/image/mobil/utu-hizmeti.jpg",
                            ServiceName = "Ütü Hizmeti",
                            SettingID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 15,
                            IconPicture = "https://roof264.com/media/image/mobil/cay-kahve-hizmeti.jpg",
                            ServiceName = "Çay - Kahve Hizmeti",
                            SettingID = 1,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Income", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RegistrationID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("RegistrationID");

                    b.ToTable("Incomes");
                });

            modelBuilder.Entity("Entities.Concrete.Message", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("AppUserID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Entities.Concrete.Picture", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AboutusID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PictureName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ID");

                    b.HasIndex("AboutusID");

                    b.ToTable("Pictures");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AboutusID = 1,
                            PictureName = "Görsel1",
                            PictureUrl = "/img/gallery/room-single.jpg",
                            Status = 0
                        },
                        new
                        {
                            ID = 2,
                            AboutusID = 1,
                            PictureName = "Görsel2",
                            PictureUrl = "/img/gallery/room-double.jpg",
                            Status = 0
                        },
                        new
                        {
                            ID = 3,
                            AboutusID = 1,
                            PictureName = "Görsel3",
                            PictureUrl = "/img/gallery/room-double-superrior.jpg",
                            Status = 0
                        },
                        new
                        {
                            ID = 4,
                            AboutusID = 1,
                            PictureName = "Görsel4",
                            PictureUrl = "/img/gallery/room-triple.jpg",
                            Status = 0
                        },
                        new
                        {
                            ID = 5,
                            AboutusID = 1,
                            PictureName = "Görsel5",
                            PictureUrl = "/img/gallery/room-triple-superrior.jpg",
                            Status = 0
                        },
                        new
                        {
                            ID = 6,
                            AboutusID = 1,
                            PictureName = "Görsel6",
                            PictureUrl = "/img/gallery/room-family.jpg",
                            Status = 0
                        },
                        new
                        {
                            ID = 7,
                            AboutusID = 1,
                            PictureName = "Görsel7",
                            PictureUrl = "/img/gallery/room-presidential-suite.jpg",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Entities.Concrete.ReceptionReservation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("date");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NumberOfPeople")
                        .HasColumnType("int");

                    b.Property<bool>("Payment")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ReservationStatus")
                        .HasColumnType("int");

                    b.Property<int>("ReservationType")
                        .HasColumnType("int");

                    b.Property<int>("RoomID")
                        .HasColumnType("int");

                    b.Property<int?>("RoomTypeID")
                        .HasColumnType("int");

                    b.Property<int>("ServicePackID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ID");

                    b.HasIndex("RoomID");

                    b.HasIndex("RoomTypeID");

                    b.HasIndex("ServicePackID");

                    b.ToTable("ReceptionReservations");
                });

            modelBuilder.Entity("Entities.Concrete.Registration", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("CheckInTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time")
                        .HasDefaultValue(new TimeSpan(0, 14, 0, 0, 0));

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("date");

                    b.Property<TimeSpan?>("CheckOutTime")
                        .HasColumnType("time");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NumberOfPeople")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RegistrationStatus")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationType")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<int?>("ReservationID")
                        .HasColumnType("int");

                    b.Property<int>("RoomID")
                        .HasColumnType("int");

                    b.Property<int>("ServicePackID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ID");

                    b.HasIndex("RoomID");

                    b.HasIndex("ServicePackID");

                    b.ToTable("Registrations");
                });

            modelBuilder.Entity("Entities.Concrete.Room", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoomStatus")
                        .HasColumnType("int");

                    b.Property<int>("RoomTypeID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ID");

                    b.HasIndex("RoomTypeID");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            FloorNumber = 1,
                            RoomNumber = "100",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 2,
                            FloorNumber = 1,
                            RoomNumber = "101",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 3,
                            FloorNumber = 1,
                            RoomNumber = "102",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 4,
                            FloorNumber = 1,
                            RoomNumber = "103",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 5,
                            FloorNumber = 1,
                            RoomNumber = "104",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 6,
                            FloorNumber = 1,
                            RoomNumber = "105",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 7,
                            FloorNumber = 1,
                            RoomNumber = "106",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 8,
                            FloorNumber = 1,
                            RoomNumber = "107",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 9,
                            FloorNumber = 1,
                            RoomNumber = "108",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 10,
                            FloorNumber = 1,
                            RoomNumber = "109",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 11,
                            FloorNumber = 1,
                            RoomNumber = "110",
                            RoomStatus = 5,
                            RoomTypeID = 4,
                            Status = 0
                        },
                        new
                        {
                            ID = 12,
                            FloorNumber = 1,
                            RoomNumber = "111",
                            RoomStatus = 5,
                            RoomTypeID = 4,
                            Status = 0
                        },
                        new
                        {
                            ID = 13,
                            FloorNumber = 1,
                            RoomNumber = "112",
                            RoomStatus = 5,
                            RoomTypeID = 4,
                            Status = 0
                        },
                        new
                        {
                            ID = 14,
                            FloorNumber = 1,
                            RoomNumber = "113",
                            RoomStatus = 5,
                            RoomTypeID = 4,
                            Status = 0
                        },
                        new
                        {
                            ID = 15,
                            FloorNumber = 1,
                            RoomNumber = "114",
                            RoomStatus = 5,
                            RoomTypeID = 4,
                            Status = 0
                        },
                        new
                        {
                            ID = 16,
                            FloorNumber = 1,
                            RoomNumber = "115",
                            RoomStatus = 5,
                            RoomTypeID = 4,
                            Status = 0
                        },
                        new
                        {
                            ID = 17,
                            FloorNumber = 1,
                            RoomNumber = "116",
                            RoomStatus = 5,
                            RoomTypeID = 4,
                            Status = 0
                        },
                        new
                        {
                            ID = 18,
                            FloorNumber = 1,
                            RoomNumber = "117",
                            RoomStatus = 5,
                            RoomTypeID = 4,
                            Status = 0
                        },
                        new
                        {
                            ID = 19,
                            FloorNumber = 1,
                            RoomNumber = "118",
                            RoomStatus = 5,
                            RoomTypeID = 4,
                            Status = 0
                        },
                        new
                        {
                            ID = 20,
                            FloorNumber = 1,
                            RoomNumber = "119",
                            RoomStatus = 5,
                            RoomTypeID = 4,
                            Status = 0
                        },
                        new
                        {
                            ID = 21,
                            FloorNumber = 2,
                            RoomNumber = "120",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 22,
                            FloorNumber = 2,
                            RoomNumber = "121",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 23,
                            FloorNumber = 2,
                            RoomNumber = "122",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 24,
                            FloorNumber = 2,
                            RoomNumber = "123",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 25,
                            FloorNumber = 2,
                            RoomNumber = "124",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 26,
                            FloorNumber = 2,
                            RoomNumber = "125",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 27,
                            FloorNumber = 2,
                            RoomNumber = "126",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 28,
                            FloorNumber = 2,
                            RoomNumber = "127",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 29,
                            FloorNumber = 2,
                            RoomNumber = "128",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 30,
                            FloorNumber = 2,
                            RoomNumber = "129",
                            RoomStatus = 5,
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 31,
                            FloorNumber = 2,
                            RoomNumber = "130",
                            RoomStatus = 5,
                            RoomTypeID = 2,
                            Status = 0
                        },
                        new
                        {
                            ID = 32,
                            FloorNumber = 2,
                            RoomNumber = "131",
                            RoomStatus = 5,
                            RoomTypeID = 2,
                            Status = 0
                        },
                        new
                        {
                            ID = 33,
                            FloorNumber = 2,
                            RoomNumber = "132",
                            RoomStatus = 5,
                            RoomTypeID = 2,
                            Status = 0
                        },
                        new
                        {
                            ID = 34,
                            FloorNumber = 2,
                            RoomNumber = "133",
                            RoomStatus = 5,
                            RoomTypeID = 2,
                            Status = 0
                        },
                        new
                        {
                            ID = 35,
                            FloorNumber = 2,
                            RoomNumber = "134",
                            RoomStatus = 5,
                            RoomTypeID = 2,
                            Status = 0
                        },
                        new
                        {
                            ID = 36,
                            FloorNumber = 2,
                            RoomNumber = "135",
                            RoomStatus = 5,
                            RoomTypeID = 2,
                            Status = 0
                        },
                        new
                        {
                            ID = 37,
                            FloorNumber = 2,
                            RoomNumber = "136",
                            RoomStatus = 5,
                            RoomTypeID = 2,
                            Status = 0
                        },
                        new
                        {
                            ID = 38,
                            FloorNumber = 2,
                            RoomNumber = "137",
                            RoomStatus = 5,
                            RoomTypeID = 2,
                            Status = 0
                        },
                        new
                        {
                            ID = 39,
                            FloorNumber = 2,
                            RoomNumber = "138",
                            RoomStatus = 5,
                            RoomTypeID = 2,
                            Status = 0
                        },
                        new
                        {
                            ID = 40,
                            FloorNumber = 2,
                            RoomNumber = "139",
                            RoomStatus = 5,
                            RoomTypeID = 2,
                            Status = 0
                        },
                        new
                        {
                            ID = 41,
                            FloorNumber = 3,
                            RoomNumber = "140",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 42,
                            FloorNumber = 3,
                            RoomNumber = "141",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 43,
                            FloorNumber = 3,
                            RoomNumber = "142",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 44,
                            FloorNumber = 3,
                            RoomNumber = "143",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 45,
                            FloorNumber = 3,
                            RoomNumber = "144",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 46,
                            FloorNumber = 3,
                            RoomNumber = "145",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 47,
                            FloorNumber = 3,
                            RoomNumber = "146",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 48,
                            FloorNumber = 3,
                            RoomNumber = "147",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 49,
                            FloorNumber = 3,
                            RoomNumber = "148",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 50,
                            FloorNumber = 3,
                            RoomNumber = "149",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 51,
                            FloorNumber = 3,
                            RoomNumber = "150",
                            RoomStatus = 5,
                            RoomTypeID = 5,
                            Status = 0
                        },
                        new
                        {
                            ID = 52,
                            FloorNumber = 3,
                            RoomNumber = "151",
                            RoomStatus = 5,
                            RoomTypeID = 5,
                            Status = 0
                        },
                        new
                        {
                            ID = 53,
                            FloorNumber = 3,
                            RoomNumber = "152",
                            RoomStatus = 5,
                            RoomTypeID = 5,
                            Status = 0
                        },
                        new
                        {
                            ID = 54,
                            FloorNumber = 3,
                            RoomNumber = "153",
                            RoomStatus = 5,
                            RoomTypeID = 5,
                            Status = 0
                        },
                        new
                        {
                            ID = 55,
                            FloorNumber = 3,
                            RoomNumber = "154",
                            RoomStatus = 5,
                            RoomTypeID = 5,
                            Status = 0
                        },
                        new
                        {
                            ID = 56,
                            FloorNumber = 3,
                            RoomNumber = "155",
                            RoomStatus = 5,
                            RoomTypeID = 5,
                            Status = 0
                        },
                        new
                        {
                            ID = 57,
                            FloorNumber = 3,
                            RoomNumber = "156",
                            RoomStatus = 5,
                            RoomTypeID = 5,
                            Status = 0
                        },
                        new
                        {
                            ID = 58,
                            FloorNumber = 3,
                            RoomNumber = "157",
                            RoomStatus = 5,
                            RoomTypeID = 5,
                            Status = 0
                        },
                        new
                        {
                            ID = 59,
                            FloorNumber = 3,
                            RoomNumber = "158",
                            RoomStatus = 5,
                            RoomTypeID = 5,
                            Status = 0
                        },
                        new
                        {
                            ID = 60,
                            FloorNumber = 3,
                            RoomNumber = "159",
                            RoomStatus = 5,
                            RoomTypeID = 5,
                            Status = 0
                        },
                        new
                        {
                            ID = 61,
                            FloorNumber = 4,
                            RoomNumber = "160",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 62,
                            FloorNumber = 4,
                            RoomNumber = "161",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 63,
                            FloorNumber = 4,
                            RoomNumber = "162",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 64,
                            FloorNumber = 4,
                            RoomNumber = "163",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 65,
                            FloorNumber = 4,
                            RoomNumber = "164",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 66,
                            FloorNumber = 4,
                            RoomNumber = "165",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 67,
                            FloorNumber = 4,
                            RoomNumber = "166",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 68,
                            FloorNumber = 4,
                            RoomNumber = "167",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 69,
                            FloorNumber = 4,
                            RoomNumber = "168",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 70,
                            FloorNumber = 4,
                            RoomNumber = "169",
                            RoomStatus = 5,
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 71,
                            FloorNumber = 4,
                            RoomNumber = "170",
                            RoomStatus = 5,
                            RoomTypeID = 6,
                            Status = 0
                        },
                        new
                        {
                            ID = 72,
                            FloorNumber = 4,
                            RoomNumber = "171",
                            RoomStatus = 5,
                            RoomTypeID = 6,
                            Status = 0
                        },
                        new
                        {
                            ID = 73,
                            FloorNumber = 4,
                            RoomNumber = "172",
                            RoomStatus = 5,
                            RoomTypeID = 6,
                            Status = 0
                        },
                        new
                        {
                            ID = 74,
                            FloorNumber = 4,
                            RoomNumber = "173",
                            RoomStatus = 5,
                            RoomTypeID = 6,
                            Status = 0
                        },
                        new
                        {
                            ID = 75,
                            FloorNumber = 4,
                            RoomNumber = "174",
                            RoomStatus = 5,
                            RoomTypeID = 6,
                            Status = 0
                        },
                        new
                        {
                            ID = 76,
                            FloorNumber = 4,
                            RoomNumber = "175",
                            RoomStatus = 5,
                            RoomTypeID = 6,
                            Status = 0
                        },
                        new
                        {
                            ID = 77,
                            FloorNumber = 4,
                            RoomNumber = "176",
                            RoomStatus = 5,
                            RoomTypeID = 7,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Entities.Concrete.RoomFacility", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FacilityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ID");

                    b.ToTable("RoomFacilities");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            FacilityName = "Klima",
                            Status = 0
                        },
                        new
                        {
                            ID = 2,
                            FacilityName = "Tv",
                            Status = 0
                        },
                        new
                        {
                            ID = 3,
                            FacilityName = "Saç Kurutma Makinesi",
                            Status = 0
                        },
                        new
                        {
                            ID = 4,
                            FacilityName = "Kablosuz Internet",
                            Status = 0
                        },
                        new
                        {
                            ID = 5,
                            FacilityName = "Minibar",
                            Status = 0
                        },
                        new
                        {
                            ID = 6,
                            FacilityName = "Balkon",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Entities.Concrete.RoomPicture", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("RoomTypeID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ID");

                    b.HasIndex("RoomTypeID");

                    b.ToTable("RoomPictures");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            PictureUrl = "/img/roomtypes/room-single.jpg",
                            RoomTypeID = 1,
                            Status = 0
                        },
                        new
                        {
                            ID = 2,
                            PictureUrl = "/img/roomtypes/room-double.jpg",
                            RoomTypeID = 2,
                            Status = 0
                        },
                        new
                        {
                            ID = 3,
                            PictureUrl = "/img/roomtypes/room-double-superrior.jpg",
                            RoomTypeID = 3,
                            Status = 0
                        },
                        new
                        {
                            ID = 4,
                            PictureUrl = "/img/roomtypes/room-triple.jpg",
                            RoomTypeID = 4,
                            Status = 0
                        },
                        new
                        {
                            ID = 5,
                            PictureUrl = "/img/roomtypes/room-triple-superrior.jpg",
                            RoomTypeID = 5,
                            Status = 0
                        },
                        new
                        {
                            ID = 6,
                            PictureUrl = "/img/roomtypes/room-family.jpg",
                            RoomTypeID = 6,
                            Status = 0
                        },
                        new
                        {
                            ID = 7,
                            PictureUrl = "/img/roomtypes/room-presidential-suite.jpg",
                            RoomTypeID = 7,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Entities.Concrete.RoomType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NumberOfBed")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfPeople")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RoomTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ID");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = "15 - 20 m² Single Room’da ihtiyaç duyabileceğiniz her şey sizin için düşünülmüştür. Park, şehir ve dağ manzaralı odalar iş ve tatil seyahatleriniz için ideal bir seçenek. Kullanışlı, modern bir tasarıma sahip odalarda tek kişilik bir adet yatak bulunmaktadır.",
                            NumberOfBed = 1,
                            NumberOfPeople = 1,
                            Price = 600m,
                            RoomTypeName = "Single Room",
                            Status = 0
                        },
                        new
                        {
                            ID = 2,
                            Description = "20 - 25 m² Double Room’da ihtiyaç duyabileceğiniz her şey sizin için düşünülmüştür. Park, şehir ve dağ manzaralı odalar iş ve tatil seyahatleriniz için ideal bir seçenek. Kullanışlı, modern bir tasarıma sahip odalarda tek kişilik iki adet yatak bulunmaktadır.",
                            NumberOfBed = 2,
                            NumberOfPeople = 2,
                            Price = 1050m,
                            RoomTypeName = "Double Room",
                            Status = 0
                        },
                        new
                        {
                            ID = 3,
                            Description = "20 - 25 m² Double Room’da ihtiyaç duyabileceğiniz her şey sizin için düşünülmüştür. Park, şehir ve dağ manzaralı odalar iş ve tatil seyahatleriniz için ideal bir seçenek. Kullanışlı, modern bir tasarıma sahip odalarda iki kişilik bir adet yatak bulunmaktadır.",
                            NumberOfBed = 1,
                            NumberOfPeople = 2,
                            Price = 1050m,
                            RoomTypeName = "Double Superior Room",
                            Status = 0
                        },
                        new
                        {
                            ID = 4,
                            Description = "25 - 30 m² Triple Room’da ihtiyaç duyabileceğiniz her şey sizin için düşünülmüştür. Park, şehir ve dağ manzaralı odalar iş ve tatil seyahatleriniz için ideal bir seçenek. Kullanışlı, modern bir tasarıma sahip odalarda üç adet tek kişilik yatak bulunmaktadır.",
                            NumberOfBed = 3,
                            NumberOfPeople = 3,
                            Price = 1500m,
                            RoomTypeName = "Triple Room",
                            Status = 0
                        },
                        new
                        {
                            ID = 5,
                            Description = "25 - 30 m² Triple Room’da ihtiyaç duyabileceğiniz her şey sizin için düşünülmüştür. Park, şehir ve dağ manzaralı odalar iş ve tatil seyahatleriniz için ideal bir seçenek. Kullanışlı, modern bir tasarıma sahip odalarda bir adet tek kişilik, bir adet iki kişilik yatak bulunmaktadır.",
                            NumberOfBed = 2,
                            NumberOfPeople = 3,
                            Price = 1500m,
                            RoomTypeName = "Triple Superior Room",
                            Status = 0
                        },
                        new
                        {
                            ID = 6,
                            Description = "30 - 35 m² Family Room’da ihtiyaç duyabileceğiniz her şey sizin için düşünülmüştür. Park, şehir ve dağ manzaralı odalar iş ve tatil seyahatleriniz için ideal bir seçenek. Kullanışlı, modern bir tasarıma sahip odalarda bir adet çift kişilik, iki adet tek kişilik yatak bulunmaktadır.",
                            NumberOfBed = 3,
                            NumberOfPeople = 4,
                            Price = 1900m,
                            RoomTypeName = "Family Room",
                            Status = 0
                        },
                        new
                        {
                            ID = 7,
                            Description = "Yatak odası, yemek yeme alanına sahip oturma salonu ve iki ayrı banyosuyla 85 m² olan geniş kullanım alanı, şehir ve dağ manzarası ile konforu sunuyor.Rahatlamak ve keyif almak için özel olarak tasarlanan jakuzili banyoda ruhunuzu ve bedeninizi dinlendirebilir, gününüzü keyifle noktalayabilirsiniz.",
                            NumberOfBed = 1,
                            NumberOfPeople = 2,
                            Price = 2500m,
                            RoomTypeName = "Presidential Suite",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Salary", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("BeenPaid")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Month")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<decimal>("MonthlySalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("Salaries");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            BeenPaid = true,
                            EmployeeID = 1,
                            Month = 2,
                            MonthlySalary = 5000m,
                            PaymentDate = new DateTime(2022, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Year = 2022
                        },
                        new
                        {
                            ID = 2,
                            BeenPaid = true,
                            EmployeeID = 2,
                            Month = 2,
                            MonthlySalary = 5500m,
                            PaymentDate = new DateTime(2022, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Year = 2022
                        },
                        new
                        {
                            ID = 3,
                            BeenPaid = false,
                            EmployeeID = 1,
                            Month = 3,
                            MonthlySalary = 5000m,
                            Status = 0,
                            Year = 2022
                        },
                        new
                        {
                            ID = 4,
                            BeenPaid = false,
                            EmployeeID = 2,
                            Month = 3,
                            MonthlySalary = 5500m,
                            Status = 0,
                            Year = 2022
                        });
                });

            modelBuilder.Entity("Entities.Concrete.ServicePack", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PackName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("PackPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ID");

                    b.ToTable("ServicePacks");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = "Bu pakette sabah kahvaltısı, öğle yemeği ve akşam yemekleri konaklama ücretine dahildir.",
                            PackName = "Tam Pansiyon",
                            PackPrice = 200m,
                            Status = 0
                        },
                        new
                        {
                            ID = 2,
                            Description = "Bu pakette konaklama süresince 3 öğün yemekler, 5 çayı ve atıştırmalıklarla gün boyunca içecekler (alkolsüz içeceklerle - yerli alkollü içecekler) konaklama ücretine dahildir. Otellerdeki aktiviteler bu konseptte dahil değildir.",
                            PackName = "Her Şey Dahil",
                            PackPrice = 500m,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Setting", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AboutusID")
                        .HasColumnType("int");

                    b.Property<int>("ContactID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("HomePageID")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SmtpEmail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SmtpHost")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SmtpPassword")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SmtpPort")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ID");

                    b.HasIndex("AboutusID");

                    b.HasIndex("ContactID");

                    b.HasIndex("HomePageID");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AboutusID = 1,
                            ContactID = 1,
                            HomePageID = 1,
                            SmtpEmail = "the.mstfa@gmail.com",
                            SmtpHost = "smtp.gmail.com",
                            SmtpPassword = "Mustafa.2525774",
                            SmtpPort = 587,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Shift", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShiftName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ID");

                    b.ToTable("Shifts");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            ShiftName = "Gündüz",
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Status = 0
                        },
                        new
                        {
                            ID = 2,
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            ShiftName = "Akşam",
                            StartTime = new TimeSpan(0, 16, 0, 0, 0),
                            Status = 0
                        },
                        new
                        {
                            ID = 3,
                            EndTime = new TimeSpan(0, 8, 0, 0, 0),
                            ShiftName = "Gece",
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = 0
                        });
                });

            modelBuilder.Entity("Entities.Concrete.StatusOfRoom", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoomID")
                        .HasColumnType("int");

                    b.Property<int>("RoomStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("StatusEndDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("StatusStartDate")
                        .HasColumnType("date");

                    b.HasKey("ID");

                    b.HasIndex("RoomID");

                    b.ToTable("StatusesOfRooms");
                });

            modelBuilder.Entity("Entities.Concrete.UseOfExtraService", b =>
                {
                    b.Property<int>("ExtraServiceID")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ExtraServiceID", "RegistrationID");

                    b.HasIndex("RegistrationID");

                    b.ToTable("UseOfExtraServices");
                });

            modelBuilder.Entity("Entities.Concrete.WebReservation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppUserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("date");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("DiscountedPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NumberOfPeople")
                        .HasColumnType("int");

                    b.Property<bool>("Payment")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ReservationStatus")
                        .HasColumnType("int");

                    b.Property<int>("ReservationType")
                        .HasColumnType("int");

                    b.Property<int>("RoomID")
                        .HasColumnType("int");

                    b.Property<int?>("RoomTypeID")
                        .HasColumnType("int");

                    b.Property<int>("ServicePackID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ID");

                    b.HasIndex("AppUserID");

                    b.HasIndex("RoomID");

                    b.HasIndex("RoomTypeID");

                    b.HasIndex("ServicePackID");

                    b.ToTable("WebReservations");
                });

            modelBuilder.Entity("Entities.Concrete.WorkSchedule", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<bool>("HaveOverTime")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedComputerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedIP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<TimeSpan>("OverTimeHour")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("ShiftEndTime")
                        .HasColumnType("time");

                    b.Property<string>("ShiftName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<TimeSpan>("ShiftStartTime")
                        .HasColumnType("time");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<TimeSpan>("TimesWorked")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("TotalWorkTime")
                        .HasColumnType("time");

                    b.Property<int>("WorkStatus")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("WorkSchedules");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Date = new DateTime(2022, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeID = 1,
                            HaveOverTime = false,
                            OverTimeHour = new TimeSpan(0, 0, 0, 0, 0),
                            ShiftEndTime = new TimeSpan(0, 16, 0, 0, 0),
                            ShiftName = "Gündüz",
                            ShiftStartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Status = 0,
                            TimesWorked = new TimeSpan(0, 8, 0, 0, 0),
                            TotalWorkTime = new TimeSpan(0, 8, 0, 0, 0),
                            WorkStatus = 1
                        },
                        new
                        {
                            ID = 2,
                            Date = new DateTime(2022, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeID = 2,
                            HaveOverTime = false,
                            OverTimeHour = new TimeSpan(0, 0, 0, 0, 0),
                            ShiftEndTime = new TimeSpan(0, 16, 0, 0, 0),
                            ShiftName = "Gündüz",
                            ShiftStartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Status = 0,
                            TimesWorked = new TimeSpan(0, 8, 0, 0, 0),
                            TotalWorkTime = new TimeSpan(0, 8, 0, 0, 0),
                            WorkStatus = 0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "c62f42df-2d75-4102-b281-a8637f2cb0a1",
                            ConcurrencyStamp = "85408706-c2f3-4a33-8079-1e1476af092c",
                            Name = "user",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "bcf7061b-0a59-426a-9b49-f520e1b4849b",
                            ConcurrencyStamp = "dfb84c71-68bc-4662-ae03-4601406b8e81",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3920b0ec-725e-4b34-ab67-27c7f816936d",
                            ConcurrencyStamp = "f3a92d77-c33a-43aa-b45b-f5121669435f",
                            Name = "resepsiyon",
                            NormalizedName = "RESEPSIYON"
                        },
                        new
                        {
                            Id = "75d8b242-e230-4fe8-ad20-b8e818d97957",
                            ConcurrencyStamp = "a77e1cb3-d309-45e9-af92-13c470d1e8e0",
                            Name = "insan kaynaklari",
                            NormalizedName = "INSAN KAYNAKLARI"
                        },
                        new
                        {
                            Id = "3a2aebe3-6100-4ece-b2be-8bfec2e2c329",
                            ConcurrencyStamp = "4cdaa0b9-04c1-4236-9667-c35c8988de70",
                            Name = "yardimci hizmetler",
                            NormalizedName = "YARDIMCI HIZMETLER"
                        },
                        new
                        {
                            Id = "0cd03d09-4264-4f6e-b0d8-e18fe9c03aa1",
                            ConcurrencyStamp = "77491223-3b93-4292-bea7-7a6d45a508a6",
                            Name = "bilgi islem",
                            NormalizedName = "BILGI ISLEM"
                        },
                        new
                        {
                            Id = "a98546c7-b529-4836-8d88-6af9667d8008",
                            ConcurrencyStamp = "0351866e-dc4e-450f-9c82-9c50caddef1e",
                            Name = "mutfak",
                            NormalizedName = "MUTFAK"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Entities.Concrete.Employee", b =>
                {
                    b.HasOne("Entities.Concrete.AppUser", "AppUser")
                        .WithMany("Employees")
                        .HasForeignKey("AppUserId");

                    b.HasOne("Entities.Concrete.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Shift", "Shift")
                        .WithMany("Employees")
                        .HasForeignKey("ShiftID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Department");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("Entities.Concrete.FacilityOfRoom", b =>
                {
                    b.HasOne("Entities.Concrete.RoomFacility", "RoomFacility")
                        .WithMany("FacilityOfRooms")
                        .HasForeignKey("RoomFacilityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.RoomType", "RoomType")
                        .WithMany("FacilityOfRooms")
                        .HasForeignKey("RoomTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomFacility");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("Entities.Concrete.GuestRegistration", b =>
                {
                    b.HasOne("Entities.Concrete.Guest", "Guest")
                        .WithMany("GuestRegistrations")
                        .HasForeignKey("GuestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Registration", "Registration")
                        .WithMany("GuestRegistrations")
                        .HasForeignKey("RegistrationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("Entities.Concrete.HomePageSlide", b =>
                {
                    b.HasOne("Entities.Concrete.HomePage", "HomePage")
                        .WithMany("HomePageSlides")
                        .HasForeignKey("HomePageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HomePage");
                });

            modelBuilder.Entity("Entities.Concrete.HotelService", b =>
                {
                    b.HasOne("Entities.Concrete.Setting", "Setting")
                        .WithMany("HotelServices")
                        .HasForeignKey("SettingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Setting");
                });

            modelBuilder.Entity("Entities.Concrete.Income", b =>
                {
                    b.HasOne("Entities.Concrete.Registration", "Registration")
                        .WithMany()
                        .HasForeignKey("RegistrationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("Entities.Concrete.Message", b =>
                {
                    b.HasOne("Entities.Concrete.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserID");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Entities.Concrete.Picture", b =>
                {
                    b.HasOne("Entities.Concrete.Aboutus", "Aboutus")
                        .WithMany("Pictures")
                        .HasForeignKey("AboutusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aboutus");
                });

            modelBuilder.Entity("Entities.Concrete.ReceptionReservation", b =>
                {
                    b.HasOne("Entities.Concrete.Room", "Room")
                        .WithMany("ReceptionReservations")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.RoomType", "RoomType")
                        .WithMany("ReceptionReservations")
                        .HasForeignKey("RoomTypeID");

                    b.HasOne("Entities.Concrete.ServicePack", "ServicePack")
                        .WithMany("ReceptionReservations")
                        .HasForeignKey("ServicePackID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("RoomType");

                    b.Navigation("ServicePack");
                });

            modelBuilder.Entity("Entities.Concrete.Registration", b =>
                {
                    b.HasOne("Entities.Concrete.Room", "Room")
                        .WithMany("Registirations")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.ServicePack", "ServicePack")
                        .WithMany("Registirations")
                        .HasForeignKey("ServicePackID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("ServicePack");
                });

            modelBuilder.Entity("Entities.Concrete.Room", b =>
                {
                    b.HasOne("Entities.Concrete.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("Entities.Concrete.RoomPicture", b =>
                {
                    b.HasOne("Entities.Concrete.RoomType", "RoomType")
                        .WithMany("RoomPictures")
                        .HasForeignKey("RoomTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("Entities.Concrete.Salary", b =>
                {
                    b.HasOne("Entities.Concrete.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Entities.Concrete.Setting", b =>
                {
                    b.HasOne("Entities.Concrete.Aboutus", "Aboutus")
                        .WithMany("Settings")
                        .HasForeignKey("AboutusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Contact", "Contact")
                        .WithMany("Settings")
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.HomePage", "HomePage")
                        .WithMany("Settings")
                        .HasForeignKey("HomePageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aboutus");

                    b.Navigation("Contact");

                    b.Navigation("HomePage");
                });

            modelBuilder.Entity("Entities.Concrete.StatusOfRoom", b =>
                {
                    b.HasOne("Entities.Concrete.Room", "Room")
                        .WithMany("StatusOfRooms")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Entities.Concrete.UseOfExtraService", b =>
                {
                    b.HasOne("Entities.Concrete.ExtraService", "ExtraService")
                        .WithMany("UseOfExtraServices")
                        .HasForeignKey("ExtraServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Registration", "Registiration")
                        .WithMany("UseOfExtraServices")
                        .HasForeignKey("RegistrationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExtraService");

                    b.Navigation("Registiration");
                });

            modelBuilder.Entity("Entities.Concrete.WebReservation", b =>
                {
                    b.HasOne("Entities.Concrete.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Room", "Room")
                        .WithMany("WebReservations")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.RoomType", "RoomType")
                        .WithMany("WebReservations")
                        .HasForeignKey("RoomTypeID");

                    b.HasOne("Entities.Concrete.ServicePack", "ServicePack")
                        .WithMany("WebReservations")
                        .HasForeignKey("ServicePackID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Room");

                    b.Navigation("RoomType");

                    b.Navigation("ServicePack");
                });

            modelBuilder.Entity("Entities.Concrete.WorkSchedule", b =>
                {
                    b.HasOne("Entities.Concrete.Employee", "Employee")
                        .WithMany("WorkSchedules")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Concrete.Aboutus", b =>
                {
                    b.Navigation("Pictures");

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("Entities.Concrete.AppUser", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Entities.Concrete.Contact", b =>
                {
                    b.Navigation("Settings");
                });

            modelBuilder.Entity("Entities.Concrete.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Entities.Concrete.Employee", b =>
                {
                    b.Navigation("WorkSchedules");
                });

            modelBuilder.Entity("Entities.Concrete.ExtraService", b =>
                {
                    b.Navigation("UseOfExtraServices");
                });

            modelBuilder.Entity("Entities.Concrete.Guest", b =>
                {
                    b.Navigation("GuestRegistrations");
                });

            modelBuilder.Entity("Entities.Concrete.HomePage", b =>
                {
                    b.Navigation("HomePageSlides");

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("Entities.Concrete.Registration", b =>
                {
                    b.Navigation("GuestRegistrations");

                    b.Navigation("UseOfExtraServices");
                });

            modelBuilder.Entity("Entities.Concrete.Room", b =>
                {
                    b.Navigation("ReceptionReservations");

                    b.Navigation("Registirations");

                    b.Navigation("StatusOfRooms");

                    b.Navigation("WebReservations");
                });

            modelBuilder.Entity("Entities.Concrete.RoomFacility", b =>
                {
                    b.Navigation("FacilityOfRooms");
                });

            modelBuilder.Entity("Entities.Concrete.RoomType", b =>
                {
                    b.Navigation("FacilityOfRooms");

                    b.Navigation("ReceptionReservations");

                    b.Navigation("RoomPictures");

                    b.Navigation("Rooms");

                    b.Navigation("WebReservations");
                });

            modelBuilder.Entity("Entities.Concrete.ServicePack", b =>
                {
                    b.Navigation("ReceptionReservations");

                    b.Navigation("Registirations");

                    b.Navigation("WebReservations");
                });

            modelBuilder.Entity("Entities.Concrete.Setting", b =>
                {
                    b.Navigation("HotelServices");
                });

            modelBuilder.Entity("Entities.Concrete.Shift", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
